# Generated by Django 4.2.4 on 2023-10-16 12:25
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import applications.models.organization
import common.fields.model
from applications.choices import ApplicantTypeChoice, OrganizationTypeChoice, PriorityChoice, WeekdayChoice


class Migration(migrations.Migration):

    dependencies = [
        ('reservation_units', '0085_surface_area_to_integer'),
        ('spaces', '0030_surface_area_to_integer'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('reservations', '0052_alter_reservation_reservee_id'),
        ('applications', '0065_remove_applicationevent_district'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='applicationaggregatedata',
            name='application',
        ),
        migrations.RemoveField(
            model_name='applicationeventaggregatedata',
            name='application_event',
        ),
        migrations.RemoveField(
            model_name='applicationeventscheduleresult',
            name='allocated_reservation_unit',
        ),
        migrations.RemoveField(
            model_name='applicationeventscheduleresult',
            name='application_event_schedule',
        ),
        migrations.RemoveField(
            model_name='applicationeventscheduleresult',
            name='basket',
        ),
        migrations.RemoveField(
            model_name='applicationeventscheduleresultaggregatedata',
            name='schedule_result',
        ),
        migrations.RemoveField(
            model_name='applicationeventstatus',
            name='application_event',
        ),
        migrations.RemoveField(
            model_name='applicationeventstatus',
            name='user',
        ),
        migrations.RemoveField(
            model_name='applicationeventweeklyamountreduction',
            name='application_event',
        ),
        migrations.RemoveField(
            model_name='applicationeventweeklyamountreduction',
            name='application_event_schedule_result',
        ),
        migrations.RemoveField(
            model_name='applicationeventweeklyamountreduction',
            name='user',
        ),
        migrations.RemoveField(
            model_name='applicationroundaggregatedata',
            name='application_round',
        ),
        migrations.RemoveField(
            model_name='applicationroundbasket',
            name='age_groups',
        ),
        migrations.RemoveField(
            model_name='applicationroundbasket',
            name='application_round',
        ),
        migrations.RemoveField(
            model_name='applicationroundbasket',
            name='home_city',
        ),
        migrations.RemoveField(
            model_name='applicationroundbasket',
            name='purposes',
        ),
        migrations.RemoveField(
            model_name='applicationroundstatus',
            name='application_round',
        ),
        migrations.RemoveField(
            model_name='applicationroundstatus',
            name='user',
        ),
        migrations.RemoveField(
            model_name='applicationstatus',
            name='application',
        ),
        migrations.RemoveField(
            model_name='applicationstatus',
            name='user',
        ),
        migrations.RemoveField(
            model_name='recurrence',
            name='application_event',
        ),
        migrations.AlterModelOptions(
            name='application',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='applicationevent',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='applicationeventschedule',
            options={'base_manager_name': 'objects', 'ordering': ['application_event', '-priority']},
        ),
        migrations.AlterModelOptions(
            name='applicationround',
            options={'base_manager_name': 'objects'},
        ),
        migrations.RemoveField(
            model_name='application',
            name='cached_latest_status',
        ),
        migrations.RemoveField(
            model_name='applicationround',
            name='allocating',
        ),
        migrations.AddField(
            model_name='application',
            name='cancelled_date',
            field=models.DateTimeField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name='application',
            name='sent_date',
            field=models.DateTimeField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name='applicationeventschedule',
            name='allocated_begin',
            field=models.TimeField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name='applicationeventschedule',
            name='allocated_day',
            field=common.fields.model.IntChoiceField(blank=True, enum=WeekdayChoice, default=None, null=True, validators=[django.core.validators.MinValueValidator(limit_value=0, message='Value must be between 0 and 6.'), django.core.validators.MaxValueValidator(limit_value=6, message='Value must be between 0 and 6.')]),
        ),
        migrations.AddField(
            model_name='applicationeventschedule',
            name='allocated_end',
            field=models.TimeField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name='applicationeventschedule',
            name='allocated_reservation_unit',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='application_event_schedules', to='reservation_units.reservationunit'),
        ),
        migrations.AddField(
            model_name='applicationeventschedule',
            name='declined',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.AddField(
            model_name='applicationround',
            name='handled_date',
            field=models.DateTimeField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name='applicationround',
            name='sent_date',
            field=models.DateTimeField(blank=True, default=None, null=True),
        ),
        migrations.AlterField(
            model_name='address',
            name='city',
            field=models.TextField(max_length=80),
        ),
        migrations.AlterField(
            model_name='address',
            name='city_en',
            field=models.TextField(max_length=80, null=True),
        ),
        migrations.AlterField(
            model_name='address',
            name='city_fi',
            field=models.TextField(max_length=80, null=True),
        ),
        migrations.AlterField(
            model_name='address',
            name='city_sv',
            field=models.TextField(max_length=80, null=True),
        ),
        migrations.AlterField(
            model_name='address',
            name='post_code',
            field=models.CharField(max_length=32),
        ),
        migrations.AlterField(
            model_name='address',
            name='street_address',
            field=models.TextField(max_length=80),
        ),
        migrations.AlterField(
            model_name='address',
            name='street_address_en',
            field=models.TextField(max_length=80, null=True),
        ),
        migrations.AlterField(
            model_name='address',
            name='street_address_fi',
            field=models.TextField(max_length=80, null=True),
        ),
        migrations.AlterField(
            model_name='address',
            name='street_address_sv',
            field=models.TextField(max_length=80, null=True),
        ),
        migrations.AlterField(
            model_name='application',
            name='additional_information',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='application',
            name='applicant_type',
            field=common.fields.model.StrChoiceField(enum=ApplicantTypeChoice, db_index=True, max_length=11, null=True),
        ),
        migrations.AlterField(
            model_name='application',
            name='application_round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='applications', to='applications.applicationround'),
        ),
        migrations.AlterField(
            model_name='application',
            name='billing_address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applications', to='applications.address'),
        ),
        migrations.AlterField(
            model_name='application',
            name='contact_person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='applications', to='applications.person'),
        ),
        migrations.AlterField(
            model_name='application',
            name='home_city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applications', to='applications.city'),
        ),
        migrations.AlterField(
            model_name='application',
            name='organisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='applications', to='applications.organisation'),
        ),
        migrations.AlterField(
            model_name='application',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='applications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='ability_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='application_events', to='reservations.abilitygroup'),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='age_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='application_events', to='reservations.agegroup'),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='application',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='application_events', to='applications.application'),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='begin',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='biweekly',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='declined_reservation_units',
            field=models.ManyToManyField(blank=True, related_name='application_events', to='reservation_units.reservationunit'),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='end',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='events_per_week',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='flagged',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='max_duration',
            field=models.DurationField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='min_duration',
            field=models.DurationField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='name',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='name_en',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='name_fi',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='name_sv',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='num_persons',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='applicationevent',
            name='purpose',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='application_events', to='reservations.reservationpurpose'),
        ),
        migrations.AlterField(
            model_name='applicationeventschedule',
            name='begin',
            field=models.TimeField(),
        ),
        migrations.AlterField(
            model_name='applicationeventschedule',
            name='day',
            field=common.fields.model.IntChoiceField(enum=WeekdayChoice, validators=[django.core.validators.MinValueValidator(limit_value=0, message='Value must be between 0 and 6.'), django.core.validators.MaxValueValidator(limit_value=6, message='Value must be between 0 and 6.')]),
        ),
        migrations.AlterField(
            model_name='applicationeventschedule',
            name='end',
            field=models.TimeField(),
        ),
        migrations.AlterField(
            model_name='applicationeventschedule',
            name='priority',
            field=common.fields.model.IntChoiceField(blank=True, enum=PriorityChoice, default=300, validators=[django.core.validators.MinValueValidator(limit_value=100, message='Value must be between 100 and 300.'), django.core.validators.MaxValueValidator(limit_value=300, message='Value must be between 100 and 300.')]),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='application_period_begin',
            field=models.DateTimeField(),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='application_period_end',
            field=models.DateTimeField(),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='name',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='name_en',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='name_fi',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='name_sv',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='public_display_begin',
            field=models.DateTimeField(),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='public_display_end',
            field=models.DateTimeField(),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='purposes',
            field=models.ManyToManyField(related_name='application_rounds', to='reservations.reservationpurpose'),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='reservation_period_begin',
            field=models.DateField(),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='reservation_period_end',
            field=models.DateField(),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='reservation_units',
            field=models.ManyToManyField(related_name='application_rounds', to='reservation_units.reservationunit'),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='service_sector',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='application_rounds', to='spaces.servicesector'),
        ),
        migrations.AlterField(
            model_name='applicationround',
            name='target_group',
            field=models.CharField(choices=[('INTERNAL', 'Internal'), ('PUBLIC', 'Public'), ('ALL', 'All')], max_length=50),
        ),
        migrations.AlterField(
            model_name='city',
            name='municipality_code',
            field=models.CharField(default='', max_length=30),
        ),
        migrations.AlterField(
            model_name='city',
            name='name',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name='city',
            name='name_en',
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='city',
            name='name_fi',
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='city',
            name='name_sv',
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='eventreservationunit',
            name='application_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_reservation_units', to='applications.applicationevent'),
        ),
        migrations.AlterField(
            model_name='eventreservationunit',
            name='priority',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='eventreservationunit',
            name='reservation_unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='event_reservation_units', to='reservation_units.reservationunit'),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='active_members',
            field=models.PositiveIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='address',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organisations', to='applications.address'),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='core_business',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='core_business_en',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='core_business_fi',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='core_business_sv',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='email',
            field=models.EmailField(blank=True, default='', max_length=254),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='identifier',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='name',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='name_en',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='name_fi',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='name_sv',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='organisation_type',
            field=common.fields.model.StrChoiceField(enum=OrganizationTypeChoice, default='COMPANY', max_length=24),
        ),
        migrations.AlterField(
            model_name='organisation',
            name='year_established',
            field=models.PositiveIntegerField(blank=True, null=True, validators=[applications.models.organization.year_not_in_future]),
        ),
        migrations.AlterField(
            model_name='person',
            name='email',
            field=models.EmailField(blank=True, max_length=254, null=True),
        ),
        migrations.AlterField(
            model_name='person',
            name='first_name',
            field=models.CharField(max_length=50),
        ),
        migrations.AlterField(
            model_name='person',
            name='last_name',
            field=models.CharField(max_length=50),
        ),
        migrations.AlterField(
            model_name='person',
            name='phone_number',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddIndex(
            model_name='applicationeventschedule',
            index=models.Index(fields=['application_event', 'priority'], name='event_priority_index'),
        ),
        migrations.AddConstraint(
            model_name='applicationeventschedule',
            constraint=models.CheckConstraint(check=models.Q(('begin__lte', models.F('end'))), name='begin_before_end', violation_error_message='Begin must be before end.'),
        ),
        migrations.AddConstraint(
            model_name='applicationeventschedule',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('allocated_begin__isnull', True), ('allocated_end__isnull', True), ('allocated_day__isnull', True), ('allocated_reservation_unit__isnull', True)), models.Q(('allocated_begin__isnull', False), ('allocated_end__isnull', False), ('allocated_day__isnull', False), ('allocated_reservation_unit__isnull', False), ('allocated_begin__lte', models.F('allocated_end'))), _connector='OR'), name='allocated_begin_before_end', violation_error_message='Allocation day, allocated reservation unit, allocation begin, and allocation end must all be set or null, and begin must be before end.'),
        ),
        migrations.DeleteModel(
            name='ApplicationAggregateData',
        ),
        migrations.DeleteModel(
            name='ApplicationEventAggregateData',
        ),
        migrations.DeleteModel(
            name='ApplicationEventScheduleResult',
        ),
        migrations.DeleteModel(
            name='ApplicationEventScheduleResultAggregateData',
        ),
        migrations.DeleteModel(
            name='ApplicationEventStatus',
        ),
        migrations.DeleteModel(
            name='ApplicationEventWeeklyAmountReduction',
        ),
        migrations.DeleteModel(
            name='ApplicationRoundAggregateData',
        ),
        migrations.DeleteModel(
            name='ApplicationRoundBasket',
        ),
        migrations.DeleteModel(
            name='ApplicationRoundStatus',
        ),
        migrations.DeleteModel(
            name='ApplicationStatus',
        ),
        migrations.DeleteModel(
            name='Recurrence',
        ),
    ]
