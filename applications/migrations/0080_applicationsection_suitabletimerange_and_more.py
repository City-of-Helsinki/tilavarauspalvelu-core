# Generated by Django 4.2.10 on 2024-02-15 08:50

import datetime

import django.db.models.constraints
import django.db.models.deletion
from django.db import migrations, models

import common.fields.model


class Weekday(models.TextChoices):
    MONDAY = "MONDAY", "Monday"
    TUESDAY = "TUESDAY", "Tuesday"
    WEDNESDAY = "WEDNESDAY", "Wednesday"
    THURSDAY = "THURSDAY", "Thursday"
    FRIDAY = "FRIDAY", "Friday"
    SATURDAY = "SATURDAY", "Saturday"
    SUNDAY = "SUNDAY", "Sunday"


class Priority(models.TextChoices):
    PRIMARY = "PRIMARY", "Primary"
    SECONDARY = "SECONDARY", "Secondary"


class Migration(migrations.Migration):
    dependencies = [
        ("reservation_units", "0096_remove_pricing_net_fields"),
        ("reservations", "0063_remove_reservation_priority"),
        ("applications", "0079_change_database_table_names"),
    ]

    operations = [
        migrations.CreateModel(
            name="ApplicationSection",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("num_persons", models.PositiveIntegerField()),
                ("reservations_begin_date", models.DateField()),
                ("reservations_end_date", models.DateField()),
                ("reservation_min_duration", models.DurationField()),
                ("reservation_max_duration", models.DurationField()),
                ("applied_reservations_per_week", models.PositiveIntegerField()),
                (
                    "age_group",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="application_sections",
                        to="reservations.agegroup",
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="application_sections",
                        to="applications.application",
                    ),
                ),
                (
                    "purpose",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="application_sections",
                        to="reservations.reservationpurpose",
                    ),
                ),
            ],
            options={
                "verbose_name": "Application section",
                "verbose_name_plural": "Application sections",
                "db_table": "application_section",
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="SuitableTimeRange",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "priority",
                    common.fields.model.StrChoiceField(
                        choices=[("PRIMARY", "Primary"), ("SECONDARY", "Secondary")],
                        enum=Priority,
                        max_length=9,
                    ),
                ),
                (
                    "day_of_the_week",
                    common.fields.model.StrChoiceField(
                        choices=[
                            ("MONDAY", "Monday"),
                            ("TUESDAY", "Tuesday"),
                            ("WEDNESDAY", "Wednesday"),
                            ("THURSDAY", "Thursday"),
                            ("FRIDAY", "Friday"),
                            ("SATURDAY", "Saturday"),
                            ("SUNDAY", "Sunday"),
                        ],
                        enum=Weekday,
                        max_length=9,
                    ),
                ),
                ("begin_time", models.TimeField()),
                ("end_time", models.TimeField()),
                (
                    "application_section",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="suitable_time_ranges",
                        to="applications.applicationsection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Suitable Timerange",
                "verbose_name_plural": "Suitable Timeranges",
                "db_table": "suitable_time_range",
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="ReservationUnitOption",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("preferred_order", models.PositiveIntegerField()),
                ("rejected", models.BooleanField(blank=True, default=False)),
                ("locked", models.BooleanField(blank=True, default=False)),
                (
                    "application_section",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservation_unit_options",
                        to="applications.applicationsection",
                    ),
                ),
                (
                    "reservation_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="reservation_unit_options",
                        to="reservation_units.reservationunit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reservation Unit Option",
                "verbose_name_plural": "Reservation Unit Options",
                "db_table": "reservation_unit_option",
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="AllocatedTimeSlot",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "day_of_the_week",
                    common.fields.model.StrChoiceField(
                        choices=[
                            ("MONDAY", "Monday"),
                            ("TUESDAY", "Tuesday"),
                            ("WEDNESDAY", "Wednesday"),
                            ("THURSDAY", "Thursday"),
                            ("FRIDAY", "Friday"),
                            ("SATURDAY", "Saturday"),
                            ("SUNDAY", "Sunday"),
                        ],
                        enum=Weekday,
                        max_length=9,
                    ),
                ),
                ("begin_time", models.TimeField()),
                ("end_time", models.TimeField()),
                (
                    "reservation_unit_option",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="allocated_time_slots",
                        to="applications.reservationunitoption",
                    ),
                ),
            ],
            options={
                "verbose_name": "Allocated Timeslot",
                "verbose_name_plural": "Allocated Timeslots",
                "db_table": "allocated_time_slot",
                "base_manager_name": "objects",
            },
        ),
        migrations.AddConstraint(
            model_name="suitabletimerange",
            constraint=models.CheckConstraint(
                check=models.Q(("begin_time__lt", models.F("end_time"))),
                name="begin_time_before_end_time_suitable",
                violation_error_message="Begin time must be before end time.",
            ),
        ),
        migrations.AddConstraint(
            model_name="suitabletimerange",
            constraint=models.CheckConstraint(
                check=models.Q(("begin_time__minute", 0), ("end_time__minute", 0)),
                name="begin_and_end_time_multiple_of_60_minutes_suitable",
                violation_error_message="Begin and end times must be a multiples of 60 minutes.",
            ),
        ),
        migrations.AddConstraint(
            model_name="reservationunitoption",
            constraint=models.UniqueConstraint(
                deferrable=django.db.models.constraints.Deferrable["DEFERRED"],
                fields=("application_section", "preferred_order"),
                name="unique_application_section_preferred_order",
                violation_error_message="Preferred order must be unique for each application section",
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationsection",
            constraint=models.CheckConstraint(
                check=models.Q(("reservations_begin_date__lt", models.F("reservations_end_date"))),
                name="begin_date_before_end_date",
                violation_error_message="Reservations begin date must be before reservations end date.",
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationsection",
            constraint=models.CheckConstraint(
                check=models.Q(("reservation_min_duration__lte", models.F("reservation_max_duration"))),
                name="min_duration_not_greater_than_max_duration",
                violation_error_message="Reservation min duration cannot be greater than reservation max duration.",
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationsection",
            constraint=models.CheckConstraint(
                check=models.Q(("applied_reservations_per_week__gte", 1), ("applied_reservations_per_week__lte", 7)),
                name="applied_reservations_per_week_from_1_to_7",
                violation_error_message="Can only apply from 1 to 7 reservations per week.",
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationsection",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "reservation_max_duration__in",
                        [
                            datetime.timedelta(seconds=1800),
                            datetime.timedelta(seconds=3600),
                            datetime.timedelta(seconds=5400),
                            datetime.timedelta(seconds=7200),
                            datetime.timedelta(seconds=9000),
                            datetime.timedelta(seconds=10800),
                            datetime.timedelta(seconds=12600),
                            datetime.timedelta(seconds=14400),
                            datetime.timedelta(seconds=16200),
                            datetime.timedelta(seconds=18000),
                            datetime.timedelta(seconds=19800),
                            datetime.timedelta(seconds=21600),
                            datetime.timedelta(seconds=23400),
                            datetime.timedelta(seconds=25200),
                            datetime.timedelta(seconds=27000),
                            datetime.timedelta(seconds=28800),
                            datetime.timedelta(seconds=30600),
                            datetime.timedelta(seconds=32400),
                            datetime.timedelta(seconds=34200),
                            datetime.timedelta(seconds=36000),
                            datetime.timedelta(seconds=37800),
                            datetime.timedelta(seconds=39600),
                            datetime.timedelta(seconds=41400),
                            datetime.timedelta(seconds=43200),
                            datetime.timedelta(seconds=45000),
                            datetime.timedelta(seconds=46800),
                            datetime.timedelta(seconds=48600),
                            datetime.timedelta(seconds=50400),
                            datetime.timedelta(seconds=52200),
                            datetime.timedelta(seconds=54000),
                            datetime.timedelta(seconds=55800),
                            datetime.timedelta(seconds=57600),
                            datetime.timedelta(seconds=59400),
                            datetime.timedelta(seconds=61200),
                            datetime.timedelta(seconds=63000),
                            datetime.timedelta(seconds=64800),
                            datetime.timedelta(seconds=66600),
                            datetime.timedelta(seconds=68400),
                            datetime.timedelta(seconds=70200),
                            datetime.timedelta(seconds=72000),
                            datetime.timedelta(seconds=73800),
                            datetime.timedelta(seconds=75600),
                            datetime.timedelta(seconds=77400),
                            datetime.timedelta(seconds=79200),
                            datetime.timedelta(seconds=81000),
                            datetime.timedelta(seconds=82800),
                            datetime.timedelta(seconds=84600),
                            datetime.timedelta(days=1),
                        ],
                    ),
                    (
                        "reservation_min_duration__in",
                        [
                            datetime.timedelta(seconds=1800),
                            datetime.timedelta(seconds=3600),
                            datetime.timedelta(seconds=5400),
                            datetime.timedelta(seconds=7200),
                            datetime.timedelta(seconds=9000),
                            datetime.timedelta(seconds=10800),
                            datetime.timedelta(seconds=12600),
                            datetime.timedelta(seconds=14400),
                            datetime.timedelta(seconds=16200),
                            datetime.timedelta(seconds=18000),
                            datetime.timedelta(seconds=19800),
                            datetime.timedelta(seconds=21600),
                            datetime.timedelta(seconds=23400),
                            datetime.timedelta(seconds=25200),
                            datetime.timedelta(seconds=27000),
                            datetime.timedelta(seconds=28800),
                            datetime.timedelta(seconds=30600),
                            datetime.timedelta(seconds=32400),
                            datetime.timedelta(seconds=34200),
                            datetime.timedelta(seconds=36000),
                            datetime.timedelta(seconds=37800),
                            datetime.timedelta(seconds=39600),
                            datetime.timedelta(seconds=41400),
                            datetime.timedelta(seconds=43200),
                            datetime.timedelta(seconds=45000),
                            datetime.timedelta(seconds=46800),
                            datetime.timedelta(seconds=48600),
                            datetime.timedelta(seconds=50400),
                            datetime.timedelta(seconds=52200),
                            datetime.timedelta(seconds=54000),
                            datetime.timedelta(seconds=55800),
                            datetime.timedelta(seconds=57600),
                            datetime.timedelta(seconds=59400),
                            datetime.timedelta(seconds=61200),
                            datetime.timedelta(seconds=63000),
                            datetime.timedelta(seconds=64800),
                            datetime.timedelta(seconds=66600),
                            datetime.timedelta(seconds=68400),
                            datetime.timedelta(seconds=70200),
                            datetime.timedelta(seconds=72000),
                            datetime.timedelta(seconds=73800),
                            datetime.timedelta(seconds=75600),
                            datetime.timedelta(seconds=77400),
                            datetime.timedelta(seconds=79200),
                            datetime.timedelta(seconds=81000),
                            datetime.timedelta(seconds=82800),
                            datetime.timedelta(seconds=84600),
                            datetime.timedelta(days=1),
                        ],
                    ),
                ),
                name="durations_multiple_of_30_minutes_max_24_hours",
                violation_error_message=(
                    "Reservation min and max durations must be multiples of 30 minutes, up to a maximum of 24 hours."
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="allocatedtimeslot",
            constraint=models.CheckConstraint(
                check=models.Q(("begin_time__lt", models.F("end_time"))),
                name="begin_time_before_end_time_allocated",
                violation_error_message="Begin time must be before end time.",
            ),
        ),
    ]
