# Generated by Django 4.2.7 on 2023-11-08 11:36

from django.db import migrations


def fix_preferred_order(apps, schema_editor):
    EventReservationUnit = apps.get_model("applications", "EventReservationUnit")

    preferred_order: int = 0
    application_event_id: int = -1

    # There was an issue with `0074_migrate_priority_to_preferred_order` where the `order_by` was
    # the wrong way around. This migration was applied to dev, so we need a second migration to
    # fix the preferred_order values there. Should be a no-op on other environments.
    for event_unit in EventReservationUnit.objects.order_by("application_event", "preferred_order").all():
        if application_event_id != event_unit.application_event_id:
            application_event_id = event_unit.application_event_id
            preferred_order = 0
        else:
            preferred_order += 1

        event_unit.preferred_order = preferred_order
        event_unit.save()


class Migration(migrations.Migration):
    dependencies = [
        ("applications", "0075_remove_eventreservationunit_priority"),
    ]

    operations = [
        migrations.RunPython(fix_preferred_order, migrations.RunPython.noop),
    ]
