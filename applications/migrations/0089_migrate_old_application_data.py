# Generated by Django 5.0.4 on 2024-04-08 08:47

import logging

from django.db import migrations

logger = logging.getLogger(__name__)


def migrate_application_data(apps, schema_editor):
    # Migrate application events

    ApplicationEvent = apps.get_model("applications", "ApplicationEvent")
    ApplicationSection = apps.get_model("applications", "ApplicationSection")

    application_sections = {}

    for application_event in ApplicationEvent.objects.all():
        application_sections[application_event.id] = ApplicationSection(
            name=application_event.name,
            num_persons=application_event.num_persons,
            reservation_min_duration=application_event.min_duration,
            reservation_max_duration=application_event.max_duration,
            reservations_begin_date=application_event.begin,
            reservations_end_date=application_event.end,
            applied_reservations_per_week=application_event.events_per_week,
            application=application_event.application,
            purpose=application_event.purpose,
            age_group=application_event.age_group,
        )

    # Bulk create will populate ids to the objects in `application_sections` as well
    ApplicationSection.objects.bulk_create(application_sections.values())

    # Migrate event reservation units

    EventReservationUnit = apps.get_model("applications", "EventReservationUnit")
    ReservationUnitOption = apps.get_model("applications", "ReservationUnitOption")

    reservation_unit_options = {}

    for event_reservation_unit in EventReservationUnit.objects.all():
        # (reservation_unit_id, application_event_id)
        key = (event_reservation_unit.reservation_unit.id, event_reservation_unit.application_event.id)

        section = application_sections.get(event_reservation_unit.application_event.id)
        if section is None:
            msg = (
                f"Application section not found for "
                f"application event id {event_reservation_unit.application_event.id}."
            )
            logger.critical(msg)
            continue

        reservation_unit_options[key] = ReservationUnitOption(
            preferred_order=event_reservation_unit.preferred_order,
            application_section=section,
            reservation_unit=event_reservation_unit.reservation_unit,
        )

    # Bulk create will populate ids to the objects in `reservation_unit_options` as well
    ReservationUnitOption.objects.bulk_create(reservation_unit_options.values())

    # Migrate application event schedules

    ApplicationEventSchedule = apps.get_model("applications", "ApplicationEventSchedule")
    AllocatedTimeSlot = apps.get_model("applications", "AllocatedTimeSlot")
    SuitableTimeRange = apps.get_model("applications", "SuitableTimeRange")

    allocated_time_slots = []
    suitable_time_ranges = []

    for schedule in ApplicationEventSchedule.objects.all():
        section = application_sections.get(schedule.application_event.id)
        if section is None:
            msg = f"Application section not found for application event id {schedule.application_event.id}."
            logger.critical(msg)
            continue

        suitable_time_ranges.append(
            SuitableTimeRange(
                priority="PRIMARY" if schedule.priority == 300 else "SECONDARY",
                day_of_the_week=(
                    "MONDAY"
                    if schedule.day == 0
                    else "TUESDAY"
                    if schedule.day == 1
                    else "WEDNESDAY"
                    if schedule.day == 2
                    else "THURSDAY"
                    if schedule.day == 3
                    else "FRIDAY"
                    if schedule.day == 4
                    else "SATURDAY"
                    if schedule.day == 5
                    else "SUNDAY"
                ),
                begin_time=schedule.begin,
                end_time=schedule.end,
                application_section=section,
            )
        )

        if (
            schedule.allocated_day is not None
            and schedule.allocated_begin is not None
            and schedule.allocated_end is not None
            and schedule.allocated_reservation_unit is not None
        ):
            # (reservation_unit_id, application_event_id)
            key = (schedule.allocated_reservation_unit.id, schedule.application_event.id)
            option = reservation_unit_options.get(key)
            if option is None:
                msg = (
                    f"Reservation unit option not found for "
                    f"reservation unit id {schedule.allocated_reservation_unit.id} and "
                    f"application event id {schedule.application_event.id}"
                )
                logger.critical(msg)
                continue

            allocated_time_slots.append(
                AllocatedTimeSlot(
                    day_of_the_week=(
                        "MONDAY"
                        if schedule.allocated_day == 0
                        else "TUESDAY"
                        if schedule.allocated_day == 1
                        else "WEDNESDAY"
                        if schedule.allocated_day == 2
                        else "THURSDAY"
                        if schedule.allocated_day == 3
                        else "FRIDAY"
                        if schedule.allocated_day == 4
                        else "SATURDAY"
                        if schedule.allocated_day == 5
                        else "SUNDAY"
                    ),
                    begin_time=schedule.allocated_begin,
                    end_time=schedule.allocated_end,
                    reservation_unit_option=option,
                )
            )

    AllocatedTimeSlot.objects.bulk_create(allocated_time_slots)
    SuitableTimeRange.objects.bulk_create(suitable_time_ranges)


class Migration(migrations.Migration):
    dependencies = [
        ("applications", "0088_applicationround_notes_when_applying_and_more"),
    ]

    operations = [
        migrations.RunPython(migrate_application_data, migrations.RunPython.noop),
    ]
