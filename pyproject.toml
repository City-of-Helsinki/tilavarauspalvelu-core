[tool.poetry]
name = "Tilavarauspalvelu"
version = "0"
description = ""
authors = []
classifiers = [
    # This prevents accidentally running 'poetry publish'
    "Private :: Do Not Upload",
]

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
celery = { extras = ["redis"], version = "5.3.6" }
certifi = "2024.2.2"
cryptography = "42.0.5"
Django = "5.0.4"
django-admin-extra-buttons = "1.5.7"
django-admin-rangefilter = "0.12.1"
django-admin-sortable2 = "2.1.10"
django-auditlog = "2.3.0"
django-celery-beat = "2.6.0"
django-celery-results = "2.5.1"
django-cors-headers = "4.3.1"
django-enumfields2 = "3.0.2"
django-environ = "0.11.2"
django-extensions = "3.2.3"
django-extra-fields = "3.0.2"
django-filter = "24.2"
django-graphql-jwt = "0.4.0"
django-helusers = "0.11.0"
django-import-export = "3.3.8"
django-lookup-property = "0.1.3"
django-modeltranslation = "0.18.11"
django-mptt = "0.16.0"
django-recurrence = "1.11.1"
django-redis = "5.4.0"
django-subforms = "0.3.0"
django-tinymce = "4.0.0"
djangorestframework = "3.15.1"
drf-oidc-auth = "3.0.0"
drf-spectacular = "0.27.2"
easy-thumbnails = "2.8.5"
elasticsearch-django = "8.5.2"
graphene-django = "3.2.1"
graphene-django-extensions = "0.4.2"
helsinki-profile-gdpr-api = "0.2.0"
hiredis = "2.3.2"
icalendar = "5.0.12"
jinja2 = "3.1.3"
psycopg2 = "2.9.9"
python-dateutil = "2.9.0.post0"
pyyaml = "6.0.1"
redis = "5.0.3"
sentry-sdk = "1.44.1"
social-auth-app-django = "5.4.0"
whitenoise = "6.6.0"

[tool.poetry.dependencies.uWSGI]
version = "2.0.23"
# Skip installation on Windows as uWSGI does not support it without Cygwin.
# Windows users should use WSL for their local development virtualenv, but can
# still create another virtualenv in Windows without uWSGI for pre-commit hooks.
markers = "sys_platform != 'win32'"

[tool.poetry.group.test.dependencies]
assertpy = "1.1"
django-graphiql-debug-toolbar = "0.2.0"
factory-boy = "3.3.0"
faker = "24.7.1"
freezegun = "1.4.0"
polib = "1.2.0"
pytest = "8.1.1"
pytest-cov = "5.0.0"
pytest-django = "4.8.0"
pytest-xdist = "3.5.0"
requests-mock = "1.12.1"

[tool.poetry.group.lint.dependencies]
pre-commit = "3.7.0"
ruff-lsp = "0.0.53"

[tool.ruff]
fix = true
line-length = 120
target-version = "py312"
extend-exclude = [
    "api/examples.py",
    "build",
    "local_settings.py",
    "migrations",
    "tilavarauspalvelu/settings.py",
    "venv",
]
lint.select = [
    "B",        # flake8-bugbear
    "C4",       # flake8-comprehensions
    "COM",      # flake8-commas
    "D200",     # pydocstyle: One-line docstring should fit on one line
    "D201",     # pydocstyle: No blank lines allowed before function docstring (found {num_lines})
    "D202",     # pydocstyle: No blank lines allowed after function docstring (found {num_lines})
    "D209",     # pydocstyle: Multi-line docstring closing quotes should be on a separate line
    "D213",     # pydocstyle: Multi-line docstring summary should start at the second line
    "DJ",       # flake8-django
    "E",        # pycodestyle errors
    "ERA",      # eradicate
    "F",        # pyflakes
    "FA",       # flake8-future-annotations
    "FLY",      # flynt
    "I",        # isort
    "INP",      # flake8-no-pep420
    "INT",      # flake8-gettext
    "ISC",      # flake8-implicit-str-concat
    "LOG",      # flake8-logging
    "N",        # pep8-naming
    "PIE",      # flake8-pie
    "PL",       # pylint
    "PT",       # flake8-pytest-style
    "PYI",      # flake8-pyi
    "Q",        # flake8-quotes
    "RET502",   # flake8-return: Do not implicitly return None in function able to return non-None value
    "RET503",   # flake8-return: Missing explicit return at the end of function able to return non-None value
    "RSE",      # flake8-raise
    "RUF",      # ruff-specific rules
    "S",        # flake8-bandit
    "SIM",      # flake8-simplify
    "SLF",      # flake8-self
    "T20",      # flake8-print
    "TID",      # flake8-tidy-imports
    "TRY",      # tryceratops
    "UP",       # pyupgrade
    "W",        # pycodestyle warnings
]
lint.ignore = [
    "B905",     # zip without strict
    "DJ001",    # Allow `null=True` in text-based fields TODO: Remove this ignore once the issues are fixed.
    "S101",     # assert is fine
    "N801",     # invalid-class-name
    "N802",     # invalid-function-name
    "N805",     # invalid-first-argument-name-for-method
    "N806",     # non-lowercase-variable-in-function
    "N815",     # mixed-case-variable-in-class-scope
    "N818",     # error-suffix-on-exception-name
    #
    # Conflicting with ruff-format
    #
    "COM812",   # missing-trailing-comma
    "COM819",   # prohibited-trailing-comma
    "D206",     # indent-with-spaces
    "D300",     # triple-single-quotes
    "E111",     # indentation-with-invalid-multiple
    "E114",     # indentation-with-invalid-multiple-comment
    "E117",     # over-indented
    "ISC001",   # single-line-implicit-string-concatenation
    "ISC002",   # multi-line-implicit-string-concatenation
    "PLR0911",  # too-many-return-statements
    "PLR0912",  # too-many-branches
    "PLR0913",  # too-many-arguments
    "PLR0915",  # too-many-statements
    "PLR2004",  # magic-value-comparison
    "PLW2901",  # redefined-loop-name
    "Q000",     # bad-quotes-inline-string
    "Q001",     # bad-quotes-multiline-string
    "Q002",     # bad-quotes-docstring
    "Q003",     # avoidable-escaped-quote
    "RUF012",   # mutable-class-default
    "TRY003",   # raise-vanilla-args
    "W191",     # tab-indentation
]

[tool.ruff.lint.extend-per-file-ignores]
"common/management/commands/create_test_data.py" = [
    "S311",     # pseudo-random generators are fine here.
]
"common/management/commands/_utils.py" = [
    "S311",     # pseudo-random generators are fine here.
]
"api/graphql/extensions/error_codes.py" = [
    "ERA001",   # Commented code is fine here.
]
"api/graphql/*.py" = [
    "N805",     # Allow first argument of a method to NOT be `self`.
]
"test_*.py" = [
    "S105",     # Hardcoded passwords are fine in tests
    "S106",     # Hardcoded passwords are fine in tests
    "S108",     # No need to care about insecure temp file usages in tests
    "S311",     # Pseudo-random generators are fine here.
    "SLF",      # Allow accessing private members in tests
]

[tool.ruff.lint.isort]
combine-as-imports = false
known-third-party = [
    "django",
]
known-first-party = [
    "actions",
    "api",
    "applications",
    "common",
    "elastic_django",
    "email_notification",
    "merchants",
    "opening_hours",
    "permissions",
    "reservation_units",
    "reservations",
    "resources",
    "services",
    "spaces",
    "terms_of_use",
    "tests",
    "tilavarauspalvelu",
    "users",
    "utils",
]

[tool.ruff.lint.flake8-self]
extend-ignore-names = ["_base_manager", "_default_manager",  "_meta", "_mptt_meta", "_defaults", "_errors"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.bandit]
exclude_dirs = [
    "tests",
]
skips = [
    "B101",     # Assert is fine.
    "B311",     # Random is fine.
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tilavarauspalvelu.settings"
python_files = [
    "tests.py",
    "test_*.py",
    "*_tests.py",
]
norecursedirs = [
    ".git",
    "venv",
    "build",
]
filterwarnings = [
    "ignore:.*collections.*:DeprecationWarning:graphene",
    "ignore:.*ugettext_lazy.*::recurrence",
    "ignore:.*No directory at.*:UserWarning:whitenoise",
    "ignore:.*ugettext_lazy.*::auditlog",
    "ignore:.*smart_text.*::auditlog",
    "ignore:.*ugettext_lazy.*::jsonfield",
]

[tool.coverage.run]
source = [
    "allocation/",
    "api/",
    "applications/",
    "email_notification/",
    "merchants/",
    "opening_hours/",
    "permissions/",
    "reservation_units/",
    "reservations/",
    "resources/",
    "services/",
    "spaces/",
    "terms_of_use/",
    "tilavarauspalvelu/",
    "users/",
    "utils/",
]

[tool.coverage.report]
omit = [
    "*migrations*",
    "*tests*",
]
exclude_also = [
    "if TYPE_CHECKING:",
    "def __repr__",
    "def __str__",
]
