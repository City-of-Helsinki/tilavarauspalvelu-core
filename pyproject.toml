[tool.poetry]
name = "Tilavarauspalvelu"
version = "0"
description = ""
authors = []
classifiers = [
    # This prevents accidentally running 'poetry publish'
    "Private :: Do Not Upload",
]

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
celery = { extras = ["redis"], version = "5.4.0" }
certifi = "2024.8.30"
cryptography = "43.0.1"
Django = "5.1.1"
django-admin-data-views = "0.4.1"
django-admin-extra-buttons = "1.5.8"
django-admin-rangefilter = "0.13.2"
django-admin-sortable2 = "2.2.3"
django-auditlog = "3.0.0"
django-celery-beat = "2.7.0"
django-celery-results = "2.5.1"
django-cors-headers = "4.4.0"
django-enumfields2 = "3.0.2"
django-environ = "0.11.2"
django-environment-config = { version = "0.2.1", extras = ["db"] }
django-extensions = "3.2.3"
django-extra-fields = "3.0.2"
django-filter = "24.3"
django-graphql-jwt = "0.4.0"
django-helusers = "0.13.0"
django-import-export = "4.1.1"
django-jinja = "2.11.0"
django-lookup-property = "0.1.7"
django-modeltranslation = "0.19.9"
django-more-admin-filters = "1.8"
django-mptt = "0.16.0"
django-recurrence = "1.11.1"
django-redis = "5.4.0"
django-subforms = "0.3.1"
django-tinymce = "4.1.0"
djangorestframework = "3.15.2"
easy-thumbnails = "2.10"
elasticsearch-django = "8.5.2"
graphene-django = "3.2.2"
graphene-django-extensions = "0.4.5"
helsinki-profile-gdpr-api = "0.2.0"
hiredis = "3.0.0"
icalendar = "5.0.13"
jinja2 = "3.1.4"
psycopg2 = "2.9.9"
python-dateutil = "2.9.0.post0"
pyyaml = "6.0.2"
redis = "5.0.8"
sentry-sdk = "2.14.0"
social-auth-app-django = "5.4.2"
whitenoise = "6.7.0"
xhtml2pdf = "0.2.16"

[tool.poetry.dependencies.uWSGI]
version = "2.0.23"
# Skip installation on Windows as uWSGI does not support it without Cygwin.
# Windows users should use WSL for their local development virtualenv, but can
# still create another virtualenv in Windows without uWSGI for pre-commit hooks.
markers = "sys_platform != 'win32'"

[tool.poetry.group.test.dependencies]
django-debug-toolbar = "4.4.6"  # django-graphiql-debug-toolbar 0.2.0 breaks with django-debug-toolbar 4.4.6
django-graphiql-debug-toolbar = "0.2.0"
factory-boy = "3.3.1"
faker = "29.0.0"
freezegun = "1.5.1"
polib = "1.2.0"
pypdf2 = "3.0.1"
pytest = "8.3.3"
pytest-cov = "5.0.0"
pytest-django = "4.9.0"
pytest-xdist = "3.6.1"
requests-mock = "1.12.1"

[tool.poetry.group.lint.dependencies]
pre-commit = "3.8.0"
ruff = "0.6.7"
ruff-lsp = "0.0.57"
pyinstrument = "4.7.3"

[tool.ruff]
fix = true
unsafe-fixes = true
line-length = 120
target-version = "py312"
extend-exclude = [
    "api/examples.py",
    "build",
    "local_settings.py",
    "migrations",
    "tilavarauspalvelu/settings.py",
    "venv",
]
lint.explicit-preview-rules = true
lint.preview = true
lint.select = [
    "A",        # flake8-builtins
    #"ANN",     # flake8-annotations  # TODO: Enable this and fix (401) issues
    #"ARG",     # flake8-unused-arguments # TODO: Enable this and fix (353) issues
    "B",        # flake8-bugbear
    #"BLE",     # flake8-blind-except  # TODO: Enable this and fix (7) issues
    "C4",       # flake8-comprehensions
    "COM",      # flake8-commas
    "D200",     # pydocstyle: One-line docstring should fit on one line
    "D201",     # pydocstyle: No blank lines allowed before function docstring (found {num_lines})
    "D202",     # pydocstyle: No blank lines allowed after function docstring (found {num_lines})
    "D209",     # pydocstyle: Multi-line docstring closing quotes should be on a separate line
    "D213",     # pydocstyle: Multi-line docstring summary should start at the second line
    "DJ",       # flake8-django
    #"DTZ",     # flake8-datetimez  # TODO: Enable this and fix (52) issues
    "E",        # pycodestyle errors
    #"EM",      # flake8-errmsg  # TODO: Enable this and fix (188) issues
    "ERA",      # eradicate
    "F",        # pyflakes
    "FA",       # flake8-future-annotations
    #"FBT",     # flake8-boolean-trap  # TODO: Enable this and fix (95) issues
    "FLY",      # flynt
    "FURB",     # refurb
    #"G",       # flake8-logging-format  # TODO: Enable this and fix (20) issues
    "I",        # isort
    "ICN",      # flake8-import-conventions
    "INP",      # flake8-no-pep420
    "INT",      # flake8-gettext
    "ISC",      # flake8-implicit-str-concat
    "LOG",      # flake8-logging
    "N",        # pep8-naming
    "PERF",     # Perflint
    "PIE",      # flake8-pie
    "PL",       # pylint
    "PT",       # flake8-pytest-style
    #"PTH",     # flake8-use-pathlib  # TODO: Enable this and fix (6) issues
    "PYI",      # flake8-pyi
    "Q",        # flake8-quotes
    "R",        # Refactor
    "RET",      # flake8-return
    "RSE",      # flake8-raise
    "RUF",      # ruff-specific rules
    "S",        # flake8-bandit
    "SIM",      # flake8-simplify
    "SLF",      # flake8-self
    "T20",      # flake8-print
    "TCH",      # flake8-type-checking
    "TID",      # flake8-tidy-imports
    "TRY",      # tryceratops
    "UP",       # pyupgrade
    "W",        # pycodestyle warnings
]
# Preview rules
lint.extend-select = [
    "B909",     # loop-iterator-mutation
    "FURB110",  # if-exp-instead-of-or-operator
    "FURB142",  # for-loop-set-mutations
    "FURB145",  # slice-copy
    "FURB171",  # single-item-membership-test
    "PLE0307",  # invalid-str-return-type
    "PLR0916",  # too-many-boolean-expressions
    "PLR1730",  # if-stmt-min-max
    "PLR1733",  # unnecessary-dict-index-lookup
    "PLR6104",  # non-augmented-assignment
    "PLW0211",  # bad-staticmethod-argument
    "PLW0642",  # self-or-cls-assignment
    "RUF021",   # parenthesize-chained-operators
    "RUF022",   # unsorted-dunder-all
    "UP042",    # replace-str-enum
]
lint.ignore = [
    # Conflicting with ruff-format
    "ISC001",   # single-line-implicit-string-concatenation

    # Code style preference
    "COM812",   # missing-trailing-comma

    # Allow first argument of a method to NOT be `self`.
    "N805",     # invalid-first-argument-name-for-method

    # No need to annotate mutable class variables with `typing.ClassVar`
    "RUF012",   # mutable-class-default

    # Allow longer error messages in raised exceptions
    "TRY003",   # raise-vanilla-args

    # Missing type annotation for `self` in method
    "ANN101",   # missing-type-self
    # Missing type annotation for `cls` in method
    "ANN102",   # missing-type-cls
    # Any-typing allowed
    "ANN401",   # any-type

    # Allow empty comments. We use emtpy comments for forcing better code formatting.
    "PLR2044",  # empty-comment

    # To be enabled in the future
    "DJ001",    # Allow `null=True` in text-based fields TODO: Remove this ignore once the issues are fixed.
    "PLR2004",  # magic-value-comparison
    "PLW2901",  # redefined-loop-name
]

[tool.ruff.lint.extend-per-file-ignores]
"common/management/commands/*.py" = [
    "S311",     # pseudo-random generators are fine here.
    "PLR0913",  # Can take as many arguments as needed.
    "PLR0915",  # Can have as many statements as needed.
]
"utils/query_performance.py" = [
    "PLR0912",  # This one is allowed to be as complex as it needs to be.
]
"api/webhooks/serializers.py" = [
    "N802",     # Allow non-lowercase function names for webhook serializers.
    "N815",     # Allow mixedCase variables for webhook serializers.
]
"api/graphql/extensions/error_codes.py" = [
    "ERA001",   # Commented code is fine here.
]
"test_*.py" = [
    "ANN",      # No need to annotate tests
    "S101",     # Obviousle asserts are fine in tests
    "S105",     # Hardcoded passwords are fine in tests
    "S106",     # Hardcoded passwords are fine in tests
    "S108",     # No need to care about insecure temp file usages in tests
    "S311",     # Pseudo-random generators are fine here.
    "SLF",      # Allow accessing private members in tests
    "PLR0915",  # Can have as many statements as needed.
    "PLR2004",  # Magic value comparisons are allowed in tests.
    "N806",     # Allow whatever variable names in tests
]
"*tests/*.py" = [
    "ANN",      # No need to annotate tests
    "N801",     # Allow whatever class names in tests
    "N802",     # Allow whatever function names in tests
    "N815",     # Allow whatever variable names in tests
    "S311",     # Pseudo-random generators are fine here.
]

[tool.ruff.lint.isort]
combine-as-imports = false
split-on-trailing-comma = false
known-third-party = [
    "django",
]
known-first-party = [
    "actions",
    "api",
    "applications",
    "common",
    "elastic_django",
    "email_notification",
    "merchants",
    "opening_hours",
    "permissions",
    "reservation_units",
    "reservations",
    "resources",
    "services",
    "spaces",
    "terms_of_use",
    "tests",
    "tilavarauspalvelu",
    "users",
    "utils",
]

[tool.ruff.lint.flake8-import-conventions]
banned-from = [
    # Python standard libraries
    "base64",
    "csv",
    # "datetime",
    "hashlib",
    "hmac",
    "json",
    "logging",
    "math",
    "os",
    "pickle",
    "random",
    "re",
    "shutil",
    "subprocess",
    "sys",
    "tempfile",
    "time",
    "uuid",
    "xml",
    "yaml",
    # Project-specific
    "error_codes",
]

[tool.ruff.lint.flake8-self]
extend-ignore-names = ["_base_manager", "_default_manager",  "_meta", "_mptt_meta", "_defaults", "_errors"]

[tool.ruff.lint.pylint]
max-returns = 8
max-args = 10
max-bool-expr = 6

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.bandit]
exclude_dirs = [
    "tests",
]
skips = [
    "B101",     # Assert is fine.
    "B311",     # Random is fine.
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tilavarauspalvelu.settings"
DJANGO_SETTINGS_ENVIRONMENT = "AutomatedTests"
markers = [
    "slow: Marks a test that takes a long time to run.",
    "enable_elasticsearch: Mark a test that should be run with Elasticsearch enabled.",
]
python_files = [
    "tests.py",
    "test_*.py",
    "*_tests.py",
]
norecursedirs = [
    ".git",
    "venv",
    "build",
]
filterwarnings = [
    "ignore:.*collections.*:DeprecationWarning:graphene",
    "ignore:.*ugettext_lazy.*::recurrence",
    "ignore:.*No directory at.*:UserWarning:whitenoise",
    "ignore:.*ugettext_lazy.*::auditlog",
    "ignore:.*smart_text.*::auditlog",
    "ignore:.*ugettext_lazy.*::jsonfield",
]

[tool.coverage.run]
source = [
    "allocation/",
    "api/",
    "applications/",
    "email_notification/",
    "merchants/",
    "opening_hours/",
    "permissions/",
    "reservation_units/",
    "reservations/",
    "resources/",
    "services/",
    "spaces/",
    "terms_of_use/",
    "tilavarauspalvelu/",
    "users/",
    "utils/",
]

[tool.coverage.report]
omit = [
    "*migrations*",
    "*tests*",
]
exclude_also = [
    "if TYPE_CHECKING:",
    "def __repr__",
    "def __str__",
]
