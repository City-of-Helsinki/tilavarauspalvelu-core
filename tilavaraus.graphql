type AbilityGroupType {
  name: String!
  pk: Int
}

type AgeGroupType {
  minimum: Int!
  maximum: Int
  pk: Int
}

"""An enumeration."""
enum ApplicationRoundTargetGroup {
  """Internal"""
  INTERNAL

  """Public"""
  PUBLIC

  """Kaikki"""
  ALL
}

type ApplicationRoundType {
  nameFi: String
  nameEn: String
  nameSv: String
  targetGroup: ApplicationRoundTargetGroup!
  allocating: Boolean!
  reservationUnits(before: String, after: String, first: Int, last: Int): ReservationUnitByPkTypeConnection!
  applicationPeriodBegin: DateTime!
  applicationPeriodEnd: DateTime!
  reservationPeriodBegin: Date!
  reservationPeriodEnd: Date!
  publicDisplayBegin: DateTime!
  publicDisplayEnd: DateTime!
  purposes(before: String, after: String, first: Int, last: Int, nameFi: String, nameEn: String, nameSv: String): PurposeTypeConnection!
  criteriaFi: String
  criteriaEn: String
  criteriaSv: String
  pk: Int
}

type BuildingType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String
  district: DistrictType
  realEstate: RealEstateType
  surfaceArea: Float

  """The ID of the object."""
  id: ID!
  pk: Int
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type DistrictType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String

  """The ID of the object."""
  id: ID!
  pk: Int
}

input EquipmentCategoryCreateMutationInput {
  nameFi: String
  nameEn: String
  nameSv: String
  clientMutationId: String
}

type EquipmentCategoryCreateMutationPayload {
  pk: Int
  nameFi: String
  nameEn: String
  nameSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  equipmentCategory: EquipmentCategoryType
  clientMutationId: String
}

input EquipmentCategoryDeleteMutationInput {
  pk: Int!
  clientMutationId: String
}

type EquipmentCategoryDeleteMutationPayload {
  deleted: Boolean
  errors: String
  clientMutationId: String
}

type EquipmentCategoryType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String

  """The ID of the object."""
  id: ID!
  pk: Int
}

type EquipmentCategoryTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [EquipmentCategoryTypeEdge]!
}

"""A Relay edge containing a `EquipmentCategoryType` and its cursor."""
type EquipmentCategoryTypeEdge {
  """The item at the end of the edge"""
  node: EquipmentCategoryType

  """A cursor for use in pagination"""
  cursor: String!
}

input EquipmentCategoryUpdateMutationInput {
  pk: Int!
  nameFi: String
  nameEn: String
  nameSv: String
  clientMutationId: String
}

type EquipmentCategoryUpdateMutationPayload {
  pk: Int
  nameFi: String
  nameEn: String
  nameSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  equipmentCategory: EquipmentCategoryType
  clientMutationId: String
}

input EquipmentCreateMutationInput {
  categoryPk: Int!
  nameFi: String
  nameEn: String
  nameSv: String
  clientMutationId: String
}

type EquipmentCreateMutationPayload {
  pk: Int
  categoryPk: Int
  nameFi: String
  nameEn: String
  nameSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  equipment: EquipmentType
  clientMutationId: String
}

input EquipmentDeleteMutationInput {
  pk: Int!
  clientMutationId: String
}

type EquipmentDeleteMutationPayload {
  deleted: Boolean
  errors: String
  clientMutationId: String
}

type EquipmentType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String

  """The ID of the object."""
  id: ID!
  pk: Int
  category: EquipmentCategoryType
}

type EquipmentTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [EquipmentTypeEdge]!
}

"""A Relay edge containing a `EquipmentType` and its cursor."""
type EquipmentTypeEdge {
  """The item at the end of the edge"""
  node: EquipmentType

  """A cursor for use in pagination"""
  cursor: String!
}

input EquipmentUpdateMutationInput {
  pk: Int!
  categoryPk: Int!
  nameFi: String
  nameEn: String
  nameSv: String
  clientMutationId: String
}

type EquipmentUpdateMutationPayload {
  pk: Int
  categoryPk: Int
  nameFi: String
  nameEn: String
  nameSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  equipment: EquipmentType
  clientMutationId: String
}

type ErrorType {
  field: String!
  messages: [String!]!
}

type KeywordCategoryType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String

  """The ID of the object."""
  id: ID!
  pk: Int
  keywordGroups: [KeywordGroupType]
}

type KeywordCategoryTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [KeywordCategoryTypeEdge]!
}

"""A Relay edge containing a `KeywordCategoryType` and its cursor."""
type KeywordCategoryTypeEdge {
  """The item at the end of the edge"""
  node: KeywordCategoryType

  """A cursor for use in pagination"""
  cursor: String!
}

type KeywordGroupType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String

  """The ID of the object."""
  id: ID!
  pk: Int
  keywords: [KeywordType]
}

type KeywordGroupTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [KeywordGroupTypeEdge]!
}

"""A Relay edge containing a `KeywordGroupType` and its cursor."""
type KeywordGroupTypeEdge {
  """The item at the end of the edge"""
  node: KeywordGroupType

  """A cursor for use in pagination"""
  cursor: String!
}

type KeywordType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String

  """The ID of the object."""
  id: ID!
  pk: Int
}

type KeywordTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [KeywordTypeEdge]!
}

"""A Relay edge containing a `KeywordType` and its cursor."""
type KeywordTypeEdge {
  """The item at the end of the edge"""
  node: KeywordType

  """A cursor for use in pagination"""
  cursor: String!
}

type LocationType implements Node {
  addressStreetFi: String
  addressStreetEn: String
  addressStreetSv: String
  addressZip: String!
  addressCityFi: String
  addressCityEn: String
  addressCitySv: String

  """The ID of the object."""
  id: ID!
  pk: Int
  longitude: String
  latitude: String
}

type Mutation {
  createReservation(input: ReservationCreateMutationInput!): ReservationCreateMutationPayload
  updateReservation(input: ReservationUpdateMutationInput!): ReservationUpdateMutationPayload
  createReservationUnit(input: ReservationUnitCreateMutationInput!): ReservationUnitCreateMutationPayload
  updateReservationUnit(input: ReservationUnitUpdateMutationInput!): ReservationUnitUpdateMutationPayload
  createPurpose(input: PurposeCreateMutationInput!): PurposeCreateMutationPayload
  updatePurpose(input: PurposeUpdateMutationInput!): PurposeUpdateMutationPayload
  createEquipment(input: EquipmentCreateMutationInput!): EquipmentCreateMutationPayload
  updateEquipment(input: EquipmentUpdateMutationInput!): EquipmentUpdateMutationPayload
  deleteEquipment(input: EquipmentDeleteMutationInput!): EquipmentDeleteMutationPayload
  createEquipmentCategory(input: EquipmentCategoryCreateMutationInput!): EquipmentCategoryCreateMutationPayload
  updateEquipmentCategory(input: EquipmentCategoryUpdateMutationInput!): EquipmentCategoryUpdateMutationPayload
  deleteEquipmentCategory(input: EquipmentCategoryDeleteMutationInput!): EquipmentCategoryDeleteMutationPayload
  createSpace(input: SpaceCreateMutationInput!): SpaceCreateMutationPayload
  updateSpace(input: SpaceUpdateMutationInput!): SpaceUpdateMutationPayload
  deleteSpace(input: SpaceDeleteMutationInput!): SpaceDeleteMutationPayload
  createResource(input: ResourceCreateMutationInput!): ResourceCreateMutationPayload
  updateResource(input: ResourceUpdateMutationInput!): ResourceUpdateMutationPayload
  deleteResource(input: ResourceDeleteMutationInput!): ResourceDeleteMutationPayload
  updateUnit(input: UnitUpdateMutationInput!): UnitUpdateMutationPayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type OpeningHoursType {
  openingTimes: [OpeningTimesType]
  openingTimePeriods: [PeriodType]
}

type OpeningTimesType {
  date: Date
  startTime: Time
  endTime: Time
  state: String
  periods: [Int]
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PeriodType {
  periodId: Int
  startDate: Date
  endDate: Date
  resourceState: String
  timeSpans: [TimeSpanType]
  nameFi: String
  nameEn: String
  nameSv: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
}

input PurposeCreateMutationInput {
  nameFi: String
  nameEn: String
  nameSv: String
  clientMutationId: String
}

type PurposeCreateMutationPayload {
  nameFi: String
  nameEn: String
  nameSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  purpose: PurposeType
  clientMutationId: String
}

type PurposeType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String

  """The ID of the object."""
  id: ID!
  pk: Int
}

type PurposeTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PurposeTypeEdge]!
}

"""A Relay edge containing a `PurposeType` and its cursor."""
type PurposeTypeEdge {
  """The item at the end of the edge"""
  node: PurposeType

  """A cursor for use in pagination"""
  cursor: String!
}

input PurposeUpdateMutationInput {
  pk: Int!
  nameFi: String
  nameEn: String
  nameSv: String
  clientMutationId: String
}

type PurposeUpdateMutationPayload {
  pk: Int
  nameFi: String
  nameEn: String
  nameSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  purpose: PurposeType
  clientMutationId: String
}

type Query {
  reservations(before: String, after: String, first: Int, last: Int, begin: DateTime, end: DateTime): ReservationTypeConnection
  reservationUnits(before: String, after: String, first: Int, last: Int, unit: ID, keywordGroups: ID, reservationUnitType: ID, maxPersonsGte: Float, maxPersonsLte: Float, textSearch: String, purposes: ID): ReservationUnitTypeConnection

  """The ID of the object"""
  reservationUnit(id: ID!): ReservationUnitType
  reservationUnitByPk(pk: Int): ReservationUnitByPkType
  resources(before: String, after: String, first: Int, last: Int, nameFi: String, nameFi_Icontains: String, nameFi_Istartswith: String, nameSv: String, nameSv_Icontains: String, nameSv_Istartswith: String, nameEn: String, nameEn_Icontains: String, nameEn_Istartswith: String): ResourceTypeConnection

  """The ID of the object"""
  resource(id: ID!): ResourceType
  resourceByPk(pk: Int): ResourceType
  equipments(before: String, after: String, first: Int, last: Int, nameFi: String, nameFi_Icontains: String, nameFi_Istartswith: String, nameSv: String, nameSv_Icontains: String, nameSv_Istartswith: String, nameEn: String, nameEn_Icontains: String, nameEn_Istartswith: String): EquipmentTypeConnection

  """The ID of the object"""
  equipment(id: ID!): EquipmentType
  equipmentByPk(pk: Int): EquipmentType
  equipmentCategories(before: String, after: String, first: Int, last: Int, nameFi: String, nameFi_Icontains: String, nameFi_Istartswith: String, nameSv: String, nameSv_Icontains: String, nameSv_Istartswith: String, nameEn: String, nameEn_Icontains: String, nameEn_Istartswith: String): EquipmentCategoryTypeConnection

  """The ID of the object"""
  equipmentCategory(id: ID!): EquipmentCategoryType
  equipmentCategoryByPk(pk: Int): EquipmentCategoryType
  spaces(before: String, after: String, first: Int, last: Int, nameFi: String, nameFi_Icontains: String, nameFi_Istartswith: String, nameSv: String, nameSv_Icontains: String, nameSv_Istartswith: String, nameEn: String, nameEn_Icontains: String, nameEn_Istartswith: String): SpaceTypeConnection

  """The ID of the object"""
  space(id: ID!): SpaceType
  spaceByPk(pk: Int): SpaceType
  units(before: String, after: String, first: Int, last: Int, nameFi: String, nameFi_Icontains: String, nameFi_Istartswith: String, nameSv: String, nameSv_Icontains: String, nameSv_Istartswith: String, nameEn: String, nameEn_Icontains: String, nameEn_Istartswith: String): UnitTypeConnection

  """The ID of the object"""
  unit(id: ID!): UnitType
  unitByPk(pk: Int): UnitByPkType
  keywordCategories(before: String, after: String, first: Int, last: Int, nameFi: String, nameSv: String, nameEn: String): KeywordCategoryTypeConnection
  keywordGroups(before: String, after: String, first: Int, last: Int, nameFi: String, nameSv: String, nameEn: String): KeywordGroupTypeConnection
  keywords(before: String, after: String, first: Int, last: Int, nameFi: String, nameSv: String, nameEn: String): KeywordTypeConnection
  purposes(before: String, after: String, first: Int, last: Int, nameFi: String, nameEn: String, nameSv: String): PurposeTypeConnection
}

type RealEstateType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String
  district: DistrictType
  surfaceArea: Float

  """The ID of the object."""
  id: ID!
  pk: Int
}

type RecurringReservationType {
  user: String
  ageGroup: AgeGroupType
  abilityGroup: AbilityGroupType
  pk: Int
  applicationPk: Int
  applicationEventPk: Int
}

input ReservationCreateMutationInput {
  reserveeFirstName: String
  reserveeLastName: String
  reserveePhone: String
  name: String
  description: String
  priority: Int
  begin: DateTime!
  end: DateTime!
  bufferTimeBefore: String
  bufferTimeAfter: String
  reservationUnitPks: [Int]!
  clientMutationId: String
}

type ReservationCreateMutationPayload {
  pk: Int
  reserveeFirstName: String
  reserveeLastName: String
  reserveePhone: String
  name: String
  description: String
  priority: Int
  begin: DateTime
  end: DateTime
  bufferTimeBefore: String
  bufferTimeAfter: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  reservation: ReservationType
  clientMutationId: String
}

"""An enumeration."""
enum ReservationPriority {
  """Low"""
  A_100

  """Medium"""
  A_200

  """High"""
  A_300
}

type ReservationType implements Node {
  reserveeFirstName: String
  reserveeLastName: String
  reserveePhone: String
  name: String
  description: String
  state: String
  priority: ReservationPriority!
  user: String
  begin: DateTime!
  end: DateTime!
  bufferTimeBefore: Float
  bufferTimeAfter: Float
  recurringReservation: RecurringReservationType
  numPersons: Int

  """The ID of the object."""
  id: ID!
  pk: Int
  reservationUnits: [ReservationUnitType]
  calendarUrl: String
}

type ReservationTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ReservationTypeEdge]!
}

"""A Relay edge containing a `ReservationType` and its cursor."""
type ReservationTypeEdge {
  """The item at the end of the edge"""
  node: ReservationType

  """A cursor for use in pagination"""
  cursor: String!
}

type ReservationUnitByPkType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  spaces: [SpaceType]
  resources: [ResourceType]
  services: [ServiceType]
  purposes: [PurposeType]
  reservationUnitType: ReservationUnitTypeType
  requireIntroduction: Boolean!
  termsOfUseFi: String
  termsOfUseEn: String
  termsOfUseSv: String
  contactInformationFi: String
  contactInformationEn: String
  contactInformationSv: String
  maxReservationDuration: Time
  minReservationDuration: Time
  uuid: UUID!
  maxPersons: Int
  images: [ReservationUnitImageType]

  """The ID of the object."""
  id: ID!
  openingHours(openingTimes: Boolean, periods: Boolean, startDate: Date, endDate: Date): OpeningHoursType
  pk: Int
  location: LocationType
  equipment: [EquipmentType]
  unit: UnitType
  surfaceArea: Int
  keywordGroups: [KeywordGroupType]
  reservations(from: Date, to: Date, state: [String]): [ReservationType]
  applicationRounds(active: Boolean): [ApplicationRoundType]
  nextAvailableSlot: DateTime
  haukiUrl: ReservationUnitHaukiUrlType
}

type ReservationUnitByPkTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ReservationUnitByPkTypeEdge]!
}

"""A Relay edge containing a `ReservationUnitByPkType` and its cursor."""
type ReservationUnitByPkTypeEdge {
  """The item at the end of the edge"""
  node: ReservationUnitByPkType

  """A cursor for use in pagination"""
  cursor: String!
}

input ReservationUnitCreateMutationInput {
  """
  Determines if introduction is required in order to reserve this reservation unit.
  """
  requireIntroduction: Boolean
  maxPersons: Int
  equipmentPks: [Int]
  unitPk: Int!
  maxReservationDuration: String
  minReservationDuration: String
  isDraft: Boolean
  spacePks: [Int]
  resourcePks: [Int]
  purposePks: [Int]
  servicePks: [Int]
  reservationUnitTypePk: Int
  surfaceArea: Float
  bufferTimeBetweenReservations: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  nameFi: String
  nameEn: String
  nameSv: String
  termsOfUseFi: String
  termsOfUseEn: String
  termsOfUseSv: String
  contactInformationFi: String
  contactInformationEn: String
  contactInformationSv: String
  clientMutationId: String
}

type ReservationUnitCreateMutationPayload {
  pk: Int

  """Spaces included in the reservation unit as nested related objects."""
  spaces: [SpaceType]

  """Resources included in the reservation unit as nested related objects."""
  resources: [ResourceType]

  """Services included in the reservation unit as nested related objects."""
  services: [ServiceType]

  """
  Determines if introduction is required in order to reserve this reservation unit.
  """
  requireIntroduction: Boolean
  purposes: [PurposeType]

  """Images of the reservation unit as nested related objects. """
  images: [ReservationUnitImageType]

  """
  Location of this reservation unit. Dynamically determined from spaces of the reservation unit.
  """
  location: String
  maxPersons: Int

  """Type of the reservation unit as nested related object."""
  reservationUnitType: ReservationUnitTypeType
  building: String
  unitPk: Int
  uuid: String
  maxReservationDuration: String
  minReservationDuration: String
  isDraft: Boolean
  reservationUnitTypePk: Int
  surfaceArea: Float
  bufferTimeBetweenReservations: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  nameFi: String
  nameEn: String
  nameSv: String
  termsOfUseFi: String
  termsOfUseEn: String
  termsOfUseSv: String
  contactInformationFi: String
  contactInformationEn: String
  contactInformationSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  reservationUnit: ReservationUnitType
  clientMutationId: String
}

type ReservationUnitHaukiUrlType {
  url: String
}

"""An enumeration."""
enum ReservationUnitImageImageType {
  """Main image"""
  MAIN

  """Ground plan"""
  GROUND_PLAN

  """Map"""
  MAP

  """Other"""
  OTHER
}

type ReservationUnitImageType {
  imageType: ReservationUnitImageImageType!
  imageUrl: String
  mediumUrl: String
  smallUrl: String
}

type ReservationUnitType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  spaces: [SpaceType]
  resources: [ResourceType]
  services: [ServiceType]
  purposes: [PurposeType]
  reservationUnitType: ReservationUnitTypeType
  requireIntroduction: Boolean!
  termsOfUseFi: String
  termsOfUseEn: String
  termsOfUseSv: String
  contactInformationFi: String
  contactInformationEn: String
  contactInformationSv: String
  maxReservationDuration: Time
  minReservationDuration: Time
  uuid: UUID!
  isDraft: Boolean!
  maxPersons: Int
  surfaceArea: Int
  bufferTimeBetweenReservations: Float
  images: [ReservationUnitImageType]
  applicationRounds(active: Boolean): [ApplicationRoundType]

  """The ID of the object."""
  id: ID!
  pk: Int
  location: LocationType
  equipment: [EquipmentType]
  unit: UnitType
  keywordGroups: [KeywordGroupType]
  reservations(from: Date, to: Date, state: [String]): [ReservationType]
}

type ReservationUnitTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ReservationUnitTypeEdge]!
}

"""A Relay edge containing a `ReservationUnitType` and its cursor."""
type ReservationUnitTypeEdge {
  """The item at the end of the edge"""
  node: ReservationUnitType

  """A cursor for use in pagination"""
  cursor: String!
}

type ReservationUnitTypeType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String

  """The ID of the object."""
  id: ID!
  pk: Int
}

input ReservationUnitUpdateMutationInput {
  pk: Int!

  """
  Determines if introduction is required in order to reserve this reservation unit.
  """
  requireIntroduction: Boolean
  maxPersons: Int
  equipmentPks: [Int]
  unitPk: Int
  maxReservationDuration: String
  minReservationDuration: String
  isDraft: Boolean
  spacePks: [Int]
  resourcePks: [Int]
  purposePks: [Int]
  servicePks: [Int]
  reservationUnitTypePk: Int
  surfaceArea: Float
  bufferTimeBetweenReservations: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  nameFi: String
  nameEn: String
  nameSv: String
  termsOfUseFi: String
  termsOfUseEn: String
  termsOfUseSv: String
  contactInformationFi: String
  contactInformationEn: String
  contactInformationSv: String
  clientMutationId: String
}

type ReservationUnitUpdateMutationPayload {
  pk: Int

  """Spaces included in the reservation unit as nested related objects."""
  spaces: [SpaceType]

  """Resources included in the reservation unit as nested related objects."""
  resources: [ResourceType]

  """Services included in the reservation unit as nested related objects."""
  services: [ServiceType]

  """
  Determines if introduction is required in order to reserve this reservation unit.
  """
  requireIntroduction: Boolean
  purposes: [PurposeType]

  """Images of the reservation unit as nested related objects. """
  images: [ReservationUnitImageType]

  """
  Location of this reservation unit. Dynamically determined from spaces of the reservation unit.
  """
  location: String
  maxPersons: Int

  """Type of the reservation unit as nested related object."""
  reservationUnitType: ReservationUnitTypeType
  building: String
  unitPk: Int
  uuid: String
  maxReservationDuration: String
  minReservationDuration: String
  isDraft: Boolean
  reservationUnitTypePk: Int
  surfaceArea: Float
  bufferTimeBetweenReservations: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  nameFi: String
  nameEn: String
  nameSv: String
  termsOfUseFi: String
  termsOfUseEn: String
  termsOfUseSv: String
  contactInformationFi: String
  contactInformationEn: String
  contactInformationSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  reservationUnit: ReservationUnitType
  clientMutationId: String
}

input ReservationUpdateMutationInput {
  pk: Int!
  reserveeFirstName: String
  reserveeLastName: String
  reserveePhone: String
  name: String
  description: String
  priority: Int
  begin: DateTime
  end: DateTime
  bufferTimeBefore: String
  bufferTimeAfter: String
  reservationUnitPks: [Int]
  clientMutationId: String
}

type ReservationUpdateMutationPayload {
  pk: Int
  reserveeFirstName: String
  reserveeLastName: String
  reserveePhone: String
  name: String
  description: String
  priority: Int
  begin: DateTime
  end: DateTime
  bufferTimeBefore: String
  bufferTimeAfter: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  reservation: ReservationType
  clientMutationId: String
}

input ResourceCreateMutationInput {
  locationType: String

  """PK of the related space for this resource."""
  spacePk: Int

  """
  Buffer time while reservation unit is unreservable after the reservation.
  Dynamically calculated from spaces and resources.
  """
  bufferTimeBefore: String

  """Begin date and time of the reservation."""
  bufferTimeAfter: String
  isDraft: Boolean
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  nameFi: String
  nameEn: String
  nameSv: String
  clientMutationId: String
}

type ResourceCreateMutationPayload {
  pk: Int
  locationType: String

  """PK of the related space for this resource."""
  spacePk: Int

  """
  Buffer time while reservation unit is unreservable after the reservation.
  Dynamically calculated from spaces and resources.
  """
  bufferTimeBefore: String

  """Begin date and time of the reservation."""
  bufferTimeAfter: String
  isDraft: Boolean
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  nameFi: String
  nameEn: String
  nameSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  resource: ResourceType
  clientMutationId: String
}

input ResourceDeleteMutationInput {
  pk: Int!
  clientMutationId: String
}

type ResourceDeleteMutationPayload {
  deleted: Boolean
  errors: String
  clientMutationId: String
}

"""An enumeration."""
enum ResourceLocationType {
  """Fixed"""
  FIXED

  """Movable"""
  MOVABLE
}

type ResourceType implements Node {
  locationType: ResourceLocationType!
  nameFi: String
  nameEn: String
  nameSv: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  space: SpaceType
  bufferTimeBefore: Float
  bufferTimeAfter: Float
  isDraft: Boolean!

  """The ID of the object."""
  id: ID!
  pk: Int
  building: [BuildingType]
}

type ResourceTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ResourceTypeEdge]!
}

"""A Relay edge containing a `ResourceType` and its cursor."""
type ResourceTypeEdge {
  """The item at the end of the edge"""
  node: ResourceType

  """A cursor for use in pagination"""
  cursor: String!
}

input ResourceUpdateMutationInput {
  pk: Int!
  locationType: String

  """PK of the related space for this resource."""
  spacePk: Int

  """
  Buffer time while reservation unit is unreservable after the reservation.
  Dynamically calculated from spaces and resources.
  """
  bufferTimeBefore: String

  """Begin date and time of the reservation."""
  bufferTimeAfter: String
  isDraft: Boolean
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  nameFi: String
  nameEn: String
  nameSv: String
  clientMutationId: String
}

type ResourceUpdateMutationPayload {
  pk: Int
  locationType: String

  """PK of the related space for this resource."""
  spacePk: Int

  """
  Buffer time while reservation unit is unreservable after the reservation.
  Dynamically calculated from spaces and resources.
  """
  bufferTimeBefore: String

  """Begin date and time of the reservation."""
  bufferTimeAfter: String
  isDraft: Boolean
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  nameFi: String
  nameEn: String
  nameSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  resource: ResourceType
  clientMutationId: String
}

"""An enumeration."""
enum ServiceServiceType {
  """Introduction"""
  INTRODUCTION

  """Catering"""
  CATERING

  """Configuration"""
  CONFIGURATION
}

type ServiceType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String
  serviceType: ServiceServiceType!
  bufferTimeBefore: String
  bufferTimeAfter: String

  """The ID of the object."""
  id: ID!
  pk: Int
}

input SpaceCreateMutationInput {
  """PK of the parent space for this space."""
  parentPk: Int

  """Surface area of the space as square meters"""
  surfaceArea: Float

  """PK of the district for this space."""
  districtPk: Int
  maxPersons: Int
  code: String
  unitPk: Int
  nameFi: String!
  nameEn: String
  nameSv: String
  termsOfUseFi: String
  termsOfUseEn: String
  termsOfUseSv: String
  clientMutationId: String
}

type SpaceCreateMutationPayload {
  pk: Int

  """PK of the parent space for this space."""
  parentPk: Int

  """Surface area of the space as square meters"""
  surfaceArea: Float

  """PK of the district for this space."""
  districtPk: Int
  maxPersons: Int
  code: String
  unitPk: Int
  nameFi: String
  nameEn: String
  nameSv: String
  termsOfUseFi: String
  termsOfUseEn: String
  termsOfUseSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  space: SpaceType
  clientMutationId: String
}

input SpaceDeleteMutationInput {
  pk: Int!
  clientMutationId: String
}

type SpaceDeleteMutationPayload {
  deleted: Boolean
  errors: String
  clientMutationId: String
}

type SpaceType implements Node {
  nameFi: String
  nameEn: String
  nameSv: String
  parent: SpaceType
  building: BuildingType
  unit: UnitByPkType
  surfaceArea: Float
  maxPersons: Int
  code: String!
  termsOfUseFi: String
  termsOfUseEn: String
  termsOfUseSv: String

  """The ID of the object."""
  id: ID!
  pk: Int
  children: [SpaceType]
  resources: [ResourceType]
}

type SpaceTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SpaceTypeEdge]!
}

"""A Relay edge containing a `SpaceType` and its cursor."""
type SpaceTypeEdge {
  """The item at the end of the edge"""
  node: SpaceType

  """A cursor for use in pagination"""
  cursor: String!
}

input SpaceUpdateMutationInput {
  pk: Int!

  """PK of the parent space for this space."""
  parentPk: Int

  """Surface area of the space as square meters"""
  surfaceArea: Float

  """PK of the district for this space."""
  districtPk: Int
  maxPersons: Int
  code: String
  unitPk: Int
  nameFi: String
  nameEn: String
  nameSv: String
  termsOfUseFi: String
  termsOfUseEn: String
  termsOfUseSv: String
  clientMutationId: String
}

type SpaceUpdateMutationPayload {
  pk: Int

  """PK of the parent space for this space."""
  parentPk: Int

  """Surface area of the space as square meters"""
  surfaceArea: Float

  """PK of the district for this space."""
  districtPk: Int
  maxPersons: Int
  code: String
  unitPk: Int
  nameFi: String
  nameEn: String
  nameSv: String
  termsOfUseFi: String
  termsOfUseEn: String
  termsOfUseSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  space: SpaceType
  clientMutationId: String
}

"""
The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

type TimeSpanType {
  startTime: Time
  endTime: Time
  weekdays: [Int]
  resourceState: String
  endTimeOnNextDay: Boolean
  nameFi: String
  nameEn: String
  nameSv: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
}

type UnitByPkType implements Node {
  tprekId: String
  nameFi: String
  nameEn: String
  nameSv: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  shortDescriptionFi: String
  shortDescriptionEn: String
  shortDescriptionSv: String
  webPage: String!
  email: String!
  phone: String!

  """The ID of the object."""
  id: ID!
  openingHours(openingTimes: Boolean, periods: Boolean, startDate: Date, endDate: Date): OpeningHoursType
  pk: Int
  reservationUnits: [ReservationUnitType]
  spaces: [SpaceType]
  location: LocationType
}

type UnitType implements Node {
  tprekId: String
  nameFi: String
  nameEn: String
  nameSv: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  shortDescriptionFi: String
  shortDescriptionEn: String
  shortDescriptionSv: String
  webPage: String!
  email: String!
  phone: String!

  """The ID of the object."""
  id: ID!
  pk: Int
  reservationUnits: [ReservationUnitType]
  spaces: [SpaceType]
  location: LocationType
}

type UnitTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UnitTypeEdge]!
}

"""A Relay edge containing a `UnitType` and its cursor."""
type UnitTypeEdge {
  """The item at the end of the edge"""
  node: UnitType

  """A cursor for use in pagination"""
  cursor: String!
}

input UnitUpdateMutationInput {
  pk: Int!
  tprekId: String
  webPage: String
  email: String
  phone: String
  shortDescriptionFi: String
  shortDescriptionEn: String
  shortDescriptionSv: String
  nameFi: String
  nameEn: String
  nameSv: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String
  clientMutationId: String
}

type UnitUpdateMutationPayload {
  pk: Int
  tprekId: String
  webPage: String
  email: String
  phone: String
  shortDescriptionFi: String
  shortDescriptionEn: String
  shortDescriptionSv: String
  nameFi: String
  nameEn: String
  nameSv: String
  descriptionFi: String
  descriptionEn: String
  descriptionSv: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  unit: UnitType
  clientMutationId: String
}

"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

