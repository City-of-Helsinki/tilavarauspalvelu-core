# Generated by Django 3.2.15 on 2022-09-09 10:37

import datetime

import django.db.models.deletion
from django.db import migrations, models


def get_default_tax_percentage() -> int:
    from tilavarauspalvelu.models import TaxPercentage

    return TaxPercentage.objects.order_by("value").first().pk


def migrate_active_pricing(apps, schema):
    """Copy current price information to pricing table and mark it as active"""
    ReservationUnitType = apps.get_model("reservation_units", "ReservationUnit")  # noqa: N806
    ReservationUnitPricingType = apps.get_model("reservation_units", "ReservationUnitPricing")  # noqa: N806

    reservation_units = ReservationUnitType.objects.all()
    for ru in reservation_units:
        begins = datetime.date(2022, 1, 1)
        active_pricing = ReservationUnitPricingType.objects.create(
            begins=begins,
            pricing_type=ru.pricing_type,
            price_unit=ru.price_unit,
            lowest_price=ru.lowest_price,
            highest_price=ru.highest_price,
            status="active",
            reservation_unit=ru,
            tax_percentage=ru.tax_percentage,
        )
        ru.active_pricing = active_pricing
        ru.save()


class Migration(migrations.Migration):
    dependencies = [
        ("reservation_units", "0074_change_reservation_unit_type_ordering"),
    ]

    operations = [
        migrations.CreateModel(
            name="ReservationUnitPricing",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "begins",
                    models.DateField(
                        help_text="When pricing is activated", verbose_name="Date when price is activated"
                    ),
                ),
                (
                    "pricing_type",
                    models.CharField(
                        blank=True,
                        choices=[("paid", "Paid"), ("free", "Free")],
                        help_text="What kind of pricing types are available with this reservation unit.",
                        max_length=20,
                        null=True,
                        verbose_name="Pricing type",
                    ),
                ),
                (
                    "price_unit",
                    models.CharField(
                        choices=[
                            ("per_15_mins", "per 15 minutes"),
                            ("per_30_mins", "per 30 minutes"),
                            ("per_hour", "per hour"),
                            ("per_half_day", "per half a day"),
                            ("per_day", "per day"),
                            ("per_week", "per week"),
                            ("fixed", "fixed"),
                        ],
                        default="per_hour",
                        help_text="Unit of the price",
                        max_length=20,
                        verbose_name="Price unit",
                    ),
                ),
                (
                    "lowest_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Minimum price of the reservation unit",
                        max_digits=10,
                        verbose_name="Lowest price",
                    ),
                ),
                (
                    "highest_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Maximum price of the reservation unit",
                        max_digits=10,
                        verbose_name="Highest price",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("past", "past"), ("active", "active"), ("future", "future")],
                        help_text="Status of the pricing",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "reservation_unit",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pricings",
                        to="reservation_units.ReservationUnit",
                        verbose_name="Reservation unit",
                    ),
                ),
                (
                    "tax_percentage",
                    models.ForeignKey(
                        default=get_default_tax_percentage,
                        help_text="The percentage of tax included in the price",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="reservation_unit_pricings",
                        to="reservation_units.TaxPercentage",
                        verbose_name="Tax percentage",
                    ),
                ),
            ],
            options={
                "db_table": "reservation_unit_pricing",
            },
        ),
        migrations.RunPython(migrate_active_pricing, migrations.RunPython.noop),
    ]
