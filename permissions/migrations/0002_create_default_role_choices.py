# Generated by Django 3.0.10 on 2021-02-11 06:07

from django.db import migrations


def create_permissions(apps, schema_editor):
    UnitRoleChoice = apps.get_model('permissions', 'UnitRoleChoice')
    ServiceSectorRoleChoice = apps.get_model('permissions', 'ServiceSectorRoleChoice')
    GeneralRoleChoice = apps.get_model('permissions', 'GeneralRoleChoice')
    ServiceSectorRolePermission = apps.get_model('permissions', 'ServiceSectorRolePermission')
    UnitRolePermission = apps.get_model('permissions', 'UnitRolePermission')
    GeneralRolePermission = apps.get_model('permissions', 'GeneralRolePermission')


    # General Admin
    general_admin = GeneralRoleChoice.objects.create(
        code="admin",
        verbose_name="General Admin"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_service_sector_roles"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_unit_roles"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_reservation_units"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_purposes"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_age_groups"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_districts"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_ability_groups"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_reservation_unit_types"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_equipment_categories"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_equipment"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_reservations"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_view_reservations"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_resources"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_general_roles"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_handle_applications"
    )
    GeneralRolePermission.objects.create(
        role=general_admin,
        permission="can_manage_application_rounds"
    )

    # Service Sector Admin
    service_sector_admin = ServiceSectorRoleChoice.objects.create(
        code="admin",
        verbose_name="Service Sector Admin"
    )
    ServiceSectorRolePermission.objects.create(
        role=service_sector_admin,
        permission="can_manage_service_sector_roles"
    )
    ServiceSectorRolePermission.objects.create(
        role=service_sector_admin,
        permission="can_manage_unit_roles"
    )
    ServiceSectorRolePermission.objects.create(
        role=service_sector_admin,
        permission="can_manage_reservation_units"
    )
    ServiceSectorRolePermission.objects.create(
        role=service_sector_admin,
        permission="can_manage_application_rounds"
    )
    ServiceSectorRolePermission.objects.create(
        role=service_sector_admin,
        permission="can_handle_applications"
    )
    ServiceSectorRolePermission.objects.create(
        role=service_sector_admin,
        permission="can_manage_reservations"
    )
    ServiceSectorRolePermission.objects.create(
        role=service_sector_admin,
        permission="can_view_reservations"
    )

    # Service Sector Application Manager
    service_sector_application_manager = ServiceSectorRoleChoice.objects.create(
        code="application_manager",
        verbose_name="Service Sector Application Manager"
    )
    ServiceSectorRolePermission.objects.create(
        role=service_sector_application_manager,
        permission="can_manage_application_rounds"
    )
    ServiceSectorRolePermission.objects.create(
        role=service_sector_application_manager,
        permission="can_handle_applications"
    )

    # Unit Admin
    unit_admin = UnitRoleChoice.objects.create(
        code="admin",
        verbose_name="Unit Admin"
    )
    UnitRolePermission.objects.create(
        role=unit_admin,
        permission="can_manage_unit_roles"
    )
    UnitRolePermission.objects.create(
        role=unit_admin,
        permission="can_manage_reservation_units"
    )
    UnitRolePermission.objects.create(
        role=unit_admin,
        permission="can_manage_reservations"
    )
    UnitRolePermission.objects.create(
        role=unit_admin,
        permission="can_view_reservations"
    )

    # Unit Manager
    unit_manager = UnitRoleChoice.objects.create(
        code="manager",
        verbose_name="Unit Manager"
    )
    UnitRolePermission.objects.create(
        role=unit_manager,
        permission="can_manage_reservation_units"
    )
    UnitRolePermission.objects.create(
        role=unit_manager,
        permission="can_manage_reservations"
    )
    UnitRolePermission.objects.create(
        role=unit_manager,
        permission="can_view_reservations"
    )

   # Unit Viewer
    unit_viewer = UnitRoleChoice.objects.create(
        code="viewer",
        verbose_name="Unit Viewer"
    )
    UnitRolePermission.objects.create(
        role=unit_viewer,
        permission="can_view_reservations"
    )


class Migration(migrations.Migration):

    dependencies = [
        ('permissions', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_permissions, migrations.RunPython.noop),
    ]
