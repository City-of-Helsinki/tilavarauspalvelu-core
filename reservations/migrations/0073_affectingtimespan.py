# Generated by Django 5.0.6 on 2024-06-20 16:10

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("reservations", "0072_alter_reservation_begin_alter_reservation_end"),
    ]

    operations = [
        # Create materialized view
        migrations.RunSQL(
            sql=(
                """
                CREATE MATERIALIZED VIEW affecting_time_spans AS
                    SELECT
                        res.reservation_id,
                        array_agg(res.ru_id ORDER BY res.ru_id) AS affected_reservation_unit_ids,
                        res.buffered_start_datetime,
                        res.buffered_end_datetime,
                        res.buffer_time_before,
                        res.buffer_time_after,
                        res.is_blocking
                    FROM (
                        SELECT DISTINCT
                            r.id as reservation_id,
                            unnest(ruh.related_reservation_unit_ids) as ru_id,
                            (r.begin - r.buffer_time_before) as buffered_start_datetime,
                            (r.end + r.buffer_time_after) as buffered_end_datetime,
                            r.buffer_time_before as buffer_time_before,
                            r.buffer_time_after as buffer_time_after,
                            (CASE WHEN UPPER(r."type") = 'BLOCKED' THEN true ELSE false END) as is_blocking
                        FROM reservation r
                        INNER JOIN "reservation_reservation_unit" rru ON r.id = rru.reservation_id
                        INNER JOIN "reservation_unit_hierarchy" ruh ON rru.reservationunit_id = ruh.reservation_unit_id
                        WHERE (
                            (r.end + r.buffer_time_after)::date >= NOW()::date
                            AND UPPER(r.state) IN ('CREATED', 'CONFIRMED', 'WAITING_FOR_PAYMENT', 'REQUIRES_HANDLING')
                        )
                    ) res
                    GROUP BY
                        res.reservation_id,
                        res.buffered_start_datetime,
                        res.buffered_end_datetime,
                        res.buffer_time_before,
                        res.buffer_time_after,
                        res.is_blocking
                    ORDER BY res.buffered_start_datetime, res.reservation_id;
                """
            ),
            reverse_sql=(
                """
                DROP MATERIALIZED VIEW affecting_time_spans
                """
            ),
        ),
        # Add the intarray extension for array indexing
        migrations.RunSQL(
            sql="CREATE EXTENSION IF NOT EXISTS intarray; ",
            reverse_sql="DROP EXTENSION IF EXISTS intarray;",
        ),
        # Add index on 'reservation_id'
        migrations.RunSQL(
            sql="CREATE UNIQUE INDEX idx_reservation_id ON affecting_time_spans (reservation_id);",
            reverse_sql="DROP INDEX idx_reservation_id;",
        ),
        # Add index on 'affected_reservation_unit_ids'
        migrations.RunSQL(
            sql=(
                "CREATE INDEX idx_affected_reservation_unit_ids on affecting_time_spans "
                "USING GIN (affected_reservation_unit_ids gin__int_ops);"
            ),
            reverse_sql="DROP INDEX idx_affected_reservation_unit_ids;",
        ),
        # Add index on 'buffered_start_datetime'
        migrations.RunSQL(
            sql="CREATE INDEX idx_buffered_start_datetime ON affecting_time_spans (buffered_start_datetime);",
            reverse_sql="DROP INDEX idx_buffered_start_datetime;",
        ),
        # Add index on 'buffered_end_datetime'
        migrations.RunSQL(
            sql="CREATE INDEX idx_buffered_end_datetime ON affecting_time_spans (buffered_end_datetime);",
            reverse_sql="DROP INDEX idx_buffered_end_datetime",
        ),
        migrations.CreateModel(
            name="AffectingTimeSpan",
            fields=[
                (
                    "reservation",
                    models.OneToOneField(
                        db_column="reservation_id",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        related_name="affecting_time_span",
                        serialize=False,
                        to="reservations.reservation",
                    ),
                ),
                (
                    "affected_reservation_unit_ids",
                    django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None),
                ),
                ("is_blocking", models.BooleanField()),
                ("buffered_start_datetime", models.DateTimeField()),
                ("buffered_end_datetime", models.DateTimeField()),
                ("buffer_time_before", models.DurationField(null=True)),
                ("buffer_time_after", models.DurationField(null=True)),
            ],
            options={
                "verbose_name": "affecting time span",
                "verbose_name_plural": "affecting time spans",
                "db_table": "affecting_time_spans",
                "managed": False,
                "base_manager_name": "objects",
                "ordering": ["buffered_start_datetime", "reservation_id"],
            },
        ),
    ]
