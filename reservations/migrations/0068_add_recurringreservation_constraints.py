# Generated by Django 4.2.7 on 2023-11-23 10:28

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.functions.comparison
import django.db.models.functions.math
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("reservations", "0067_replace_old_weekdays_with_temp"),
    ]

    operations = [
        migrations.AddConstraint(
            model_name="recurringreservation",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("begin_date__isnull", True),
                        ("begin_time__isnull", True),
                        ("end_date__isnull", True),
                        ("end_time__isnull", True),
                    ),
                    models.Q(
                        ("begin_date__isnull", False),
                        ("begin_time__isnull", False),
                        ("end_date__isnull", False),
                        ("end_time__isnull", False),
                        models.Q(
                            ("begin_date__lt", models.F("end_date")),
                            models.Q(
                                ("begin_date", models.F("end_date")),
                                ("begin_time__lt", models.F("end_time")),
                            ),
                            _connector="OR",
                        ),
                    ),
                    _connector="OR",
                ),
                name="begin_datetime_before_end_datetime",
                violation_error_message="Reoccurring reservation must begin before it ends, or all fields must be null.",
            ),
        ),
        migrations.AddConstraint(
            model_name="recurringreservation",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("recurrence_in_days__isnull", True),
                    models.Q(
                        ("recurrence_in_days__gt", 0),
                        models.Q(
                            django.db.models.functions.comparison.Cast(
                                django.db.models.functions.math.Mod("recurrence_in_days", 7),
                                output_field=models.BooleanField(),
                            ),
                            _negated=True,
                        ),
                    ),
                    _connector="OR",
                ),
                name="recurrence_is_multiple_of_seven",
                violation_error_message="`recurrence_in_days` value must be null or a multiple of seven.",
            ),
        ),
    ]
