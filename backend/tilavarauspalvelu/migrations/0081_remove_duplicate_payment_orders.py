# Generated by Django 5.1.8 on 2025-05-14 09:37
from __future__ import annotations

from itertools import count

from django.db import migrations, models
from django.db.models.functions import RowNumber


def migration_func(apps, schema_editor):
    PaymentOrder = apps.get_model("tilavarauspalvelu", "PaymentOrder")

    counter = count()

    # In case there are multiple payments, keep the one which is highers in this hierarchy.
    # The aim is to keep the paid order first, then any ongoing orders,
    # and lastly orders for reservations that won't be happening.
    ordering = models.Case(
        models.When(models.Q(status="PAID_BY_INVOICE"), then=models.Value(next(counter))),
        models.When(models.Q(status="PAID"), then=models.Value(next(counter))),
        models.When(models.Q(status="PAID_MANUALLY"), then=models.Value(next(counter))),
        models.When(models.Q(status="PENDING"), then=models.Value(next(counter))),
        models.When(models.Q(status="DRAFT"), then=models.Value(next(counter))),
        models.When(models.Q(status="REFUNDED"), then=models.Value(next(counter))),
        models.When(models.Q(status="CANCELLED"), then=models.Value(next(counter))),
        models.When(models.Q(status="EXPIRED"), then=models.Value(next(counter))),
        default=models.Value(next(counter)),
    )

    # Delete all other payment order for the same reservation.
    # These should be expired/cancelled/refunded orders, while the paid order is kept.
    # After this, there should only be one payment order per reservation.
    payment_order_ids = (
        PaymentOrder.objects.alias(
            status_ordering=ordering,
        )
        .annotate(
            row=models.Window(
                expression=RowNumber(),
                partition_by=models.F("reservation"),
                order_by=models.OrderBy(models.F("status_ordering")),
            ),
        )
        .exclude(reservation=None)
        .filter(row__gt=1)
        .values_list("pk", flat=True)
    )
    # Must do this in two queries since windows functions are not allowed in WHERE clauses
    PaymentOrder.objects.filter(pk__in=payment_order_ids).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("tilavarauspalvelu", "0080_paymentorder_handled_payment_due_by_and_more"),
    ]

    operations = [
        migrations.RunPython(
            code=migration_func,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
