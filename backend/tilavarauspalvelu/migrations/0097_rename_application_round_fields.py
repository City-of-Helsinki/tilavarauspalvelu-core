# Generated by Django 5.1.8 on 2025-06-05 12:02
from __future__ import annotations

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("tilavarauspalvelu", "0096_rename_application_fields"),
    ]

    operations = [
        migrations.RenameField(
            model_name="applicationround",
            old_name="application_period_begin",
            new_name="application_period_begins_at",
        ),
        migrations.RenameField(
            model_name="applicationround",
            old_name="application_period_end",
            new_name="application_period_ends_at",
        ),
        migrations.RenameField(
            model_name="applicationround",
            old_name="public_display_begin",
            new_name="public_display_begins_at",
        ),
        migrations.RenameField(
            model_name="applicationround",
            old_name="public_display_end",
            new_name="public_display_ends_at",
        ),
        migrations.RenameField(
            model_name="applicationround",
            old_name="reservation_period_begin",
            new_name="reservation_period_begin_date",
        ),
        migrations.RenameField(
            model_name="applicationround",
            old_name="reservation_period_end",
            new_name="reservation_period_end_date",
        ),
        migrations.RenameField(
            model_name="applicationround",
            old_name="handled_date",
            new_name="handled_at",
        ),
        migrations.RenameField(
            model_name="applicationround",
            old_name="sent_date",
            new_name="sent_at",
        ),
        migrations.AlterField(
            model_name="applicationround",
            name="criteria",
            field=models.TextField(blank=True, default=""),
        ),
        migrations.AlterField(
            model_name="applicationround",
            name="criteria_en",
            field=models.TextField(blank=True, default="", null=True),
        ),
        migrations.AlterField(
            model_name="applicationround",
            name="criteria_fi",
            field=models.TextField(blank=True, default="", null=True),
        ),
        migrations.AlterField(
            model_name="applicationround",
            name="criteria_sv",
            field=models.TextField(blank=True, default="", null=True),
        ),
        migrations.AlterField(
            model_name="applicationround",
            name="handled_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="applicationround",
            name="sent_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        #
        # Update constraints
        migrations.RemoveConstraint(
            model_name="applicationround",
            name="application_period_begin_before_end",
        ),
        migrations.RemoveConstraint(
            model_name="applicationround",
            name="reservation_period_begin_before_end",
        ),
        migrations.RemoveConstraint(
            model_name="applicationround",
            name="public_display_begin_before_end",
        ),
        migrations.RemoveConstraint(
            model_name="applicationround",
            name="applications_end_before_reservation_period_begins",
        ),
        migrations.RemoveConstraint(
            model_name="applicationround",
            name="must_handle_before_sending",
        ),
        migrations.RemoveConstraint(
            model_name="applicationround",
            name="handling_after_application_period_end",
        ),
        migrations.AddConstraint(
            model_name="applicationround",
            constraint=models.CheckConstraint(
                condition=models.Q(("application_period_begins_at__lt", models.F("application_period_ends_at"))),
                name="application_period_begin_before_end",
                violation_error_message="Application period must begin before it ends",
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationround",
            constraint=models.CheckConstraint(
                condition=models.Q(("reservation_period_begin_date__lt", models.F("reservation_period_end_date"))),
                name="reservation_period_begin_before_end",
                violation_error_message="Reservation period must begin before it ends",
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationround",
            constraint=models.CheckConstraint(
                condition=models.Q(("public_display_begins_at__lt", models.F("public_display_ends_at"))),
                name="public_display_begin_before_end",
                violation_error_message="Public display period must begin before it ends",
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationround",
            constraint=models.CheckConstraint(
                condition=models.Q(("application_period_ends_at__date__lt", models.F("reservation_period_begin_date"))),
                name="applications_end_before_reservation_period_begins",
                violation_error_message="Application period must end before reservation period begins",
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationround",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("handled_at__isnull", True), ("sent_at__isnull", True)),
                    models.Q(("handled_at__isnull", False), ("sent_at__isnull", True)),
                    ("handled_at__lte", models.F("sent_at")),
                    _connector="OR",
                ),
                name="must_handle_before_sending",
                violation_error_message="Application round must be handled before it can be sent",
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationround",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("handled_at", None),
                    ("application_period_ends_at__date__lt", models.F("handled_at")),
                    _connector="OR",
                ),
                name="handling_after_application_period_end",
                violation_error_message="Application round can only be handled after its application round has ended",
            ),
        ),
    ]
