# Generated by Django 5.1.12 on 2025-09-15 09:42
from __future__ import annotations

from typing import Any
from unittest.mock import patch

from django.db import migrations, models


def to_python(value) -> Any:
    return value


# Must patch the 'TextChoicesField' so that it doesn't try to convert string from db to an enum.
# This would fail, since the enum values have changed.
@patch("utils.fields.model.TextChoicesField.to_python", side_effect=to_python)
def migrate_enums(apps, schema_editor, _patch):
    ReservationUnit = apps.get_model("tilavarauspalvelu", "ReservationUnit")

    ReservationUnit.objects.update(
        new_authentication=models.Case(
            models.When(authentication="weak", then=models.Value("WEAK")),
            models.When(authentication="strong", then=models.Value("STRONG")),
            default=models.Value("WEAK"),
            output_field=models.CharField(),
        ),
        new_reservation_start_interval=models.Case(
            models.When(reservation_start_interval="interval_15_mins", then=models.Value("INTERVAL_15_MINUTES")),
            models.When(reservation_start_interval="interval_30_mins", then=models.Value("INTERVAL_30_MINUTES")),
            models.When(reservation_start_interval="interval_60_mins", then=models.Value("INTERVAL_60_MINUTES")),
            models.When(reservation_start_interval="interval_90_mins", then=models.Value("INTERVAL_90_MINUTES")),
            models.When(reservation_start_interval="interval_120_mins", then=models.Value("INTERVAL_120_MINUTES")),
            models.When(reservation_start_interval="interval_180_mins", then=models.Value("INTERVAL_180_MINUTES")),
            models.When(reservation_start_interval="interval_240_mins", then=models.Value("INTERVAL_240_MINUTES")),
            models.When(reservation_start_interval="interval_300_mins", then=models.Value("INTERVAL_300_MINUTES")),
            models.When(reservation_start_interval="interval_360_mins", then=models.Value("INTERVAL_360_MINUTES")),
            models.When(reservation_start_interval="interval_420_mins", then=models.Value("INTERVAL_420_MINUTES")),
            default=models.Value("INTERVAL_15_MINUTES"),
            output_field=models.CharField(),
        ),
    )

    ReservationUnitPricing = apps.get_model("tilavarauspalvelu", "ReservationUnitPricing")

    ReservationUnitPricing.objects.update(
        new_price_unit=models.Case(
            models.When(price_unit="per_15_mins", then=models.Value("PER_15_MINS")),
            models.When(price_unit="per_30_mins", then=models.Value("PER_30_MINS")),
            models.When(price_unit="per_hour", then=models.Value("PER_HOUR")),
            models.When(price_unit="per_half_day", then=models.Value("PER_HALF_DAY")),
            models.When(price_unit="per_day", then=models.Value("PER_DAY")),
            models.When(price_unit="per_week", then=models.Value("PER_WEEK")),
            models.When(price_unit="fixed", then=models.Value("FIXED")),
            default=models.Value("PER_HOUR"),
            output_field=models.CharField(),
        ),
    )

    Resource = apps.get_model("tilavarauspalvelu", "Resource")

    Resource.objects.update(
        new_location_type=models.Case(
            models.When(location_type="fixed", then=models.Value("FIXED")),
            models.When(location_type="movable", then=models.Value("MOVABLE")),
            default=models.Value("FIXED"),
            output_field=models.CharField(),
        ),
    )

    TermsOfUse = apps.get_model("tilavarauspalvelu", "TermsOfUse")

    TermsOfUse.objects.update(
        new_terms_type=models.Case(
            models.When(terms_type="generic_terms", then=models.Value("GENERIC")),
            models.When(terms_type="payment_terms", then=models.Value("PAYMENT")),
            models.When(terms_type="cancellation_terms", then=models.Value("CANCELLATION")),
            models.When(terms_type="recurring_terms", then=models.Value("RECURRING")),
            models.When(terms_type="service_terms", then=models.Value("SERVICE")),
            models.When(terms_type="pricing_terms", then=models.Value("PRICING")),
            default=models.Value("GENERIC"),
            output_field=models.CharField(),
        ),
    )

    User = apps.get_model("tilavarauspalvelu", "User")

    User.objects.update(
        new_reservation_notification=models.Case(
            models.When(reservation_notification="all", then=models.Value("ALL")),
            models.When(reservation_notification="only_handling_required", then=models.Value("ONLY_HANDLING_REQUIRED")),
            models.When(reservation_notification="none", then=models.Value("NONE")),
            default=models.Value("ONLY_HANDLING_REQUIRED"),
            output_field=models.CharField(),
        ),
    )


class Migration(migrations.Migration):
    dependencies = [
        ("tilavarauspalvelu", "0162_add_new_enums"),
    ]

    operations = [
        migrations.RunPython(
            code=migrate_enums,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
