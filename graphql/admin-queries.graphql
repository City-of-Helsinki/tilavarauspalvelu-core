mutation DeleteSpace($input: SpaceDeleteMutationInput!) {
  deleteSpace(input: $input) {
    deleted
  }
}

mutation DeleteResource($input: ResourceDeleteMutationInput!) {
  deleteResource(input: $input) {
    deleted
  }
}

query Units($first: Int, $after: String, $orderBy: [UnitOrderingChoices], $nameFi: String) {
  units(
    first: $first
    after: $after
    orderBy: $orderBy
    nameFi: $nameFi
    onlyWithPermission: true
  ) {
    edges {
      node {
        id
        nameFi
        pk
        unitGroups {
          id
          nameFi
        }
        reservationUnits {
          id
          pk
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
    totalCount
  }
}

mutation CreateSpace($input: SpaceCreateMutationInput!) {
  createSpace(input: $input) {
    pk
  }
}

mutation UpdateSpace($input: SpaceUpdateMutationInput!) {
  updateSpace(input: $input) {
    pk
  }
}

query UnitSpaces($id: ID!) {
  unit(id: $id) {
    id
    spaces {
      id
      pk
      nameFi
      parent {
        id
        pk
      }
    }
  }
}

query Space($id: ID!) {
  space(id: $id) {
    nameSv
    nameEn
    code
    unit {
      id
      pk
      nameFi
      descriptionFi
      location {
        id
        addressStreetFi
        addressZip
        addressCityFi
      }
      spaces {
        id
        pk
        nameFi
      }
    }
    parent {
      id
      parent {
        id
        nameFi
        parent {
          id
          nameFi
        }
      }
      pk
      nameFi
    }
    id
    pk
    nameFi
    surfaceArea
    maxPersons
  }
}

mutation CreateResource($input: ResourceCreateMutationInput!) {
  createResource(input: $input) {
    pk
  }
}

mutation UpdateResource($input: ResourceUpdateMutationInput!) {
  updateResource(input: $input) {
    pk
  }
}

query Resource($id: ID!) {
  resource(id: $id) {
    id
    pk
    nameFi
    nameSv
    nameEn
    space {
      id
      pk
    }
  }
}

query ReservationUnitEdit($id: ID!) {
  reservationUnit(id: $id) {
    id
    pk
    publishingState
    reservationState
    images {
      pk
      id
      imageUrl
      largeUrl
      mediumUrl
      smallUrl
      imageType
    }
    haukiUrl
    cancellationRule {
      id
      pk
    }
    requireReservationHandling
    nameFi
    nameSv
    nameEn
    isDraft
    authentication
    spaces {
      id
      pk
      nameFi
    }
    resources {
      id
      pk
      nameFi
    }
    purposes {
      id
      pk
      nameFi
    }
    paymentTypes {
      id
      code
    }
    pricingTerms {
      id
      pk
    }
    reservationUnitType {
      id
      pk
      nameFi
    }
    uuid
    requireAdultReservee
    termsOfUseFi
    termsOfUseSv
    termsOfUseEn
    reservationKind
    reservationPendingInstructionsFi
    reservationPendingInstructionsSv
    reservationPendingInstructionsEn
    reservationConfirmedInstructionsFi
    reservationConfirmedInstructionsSv
    reservationConfirmedInstructionsEn
    reservationCancelledInstructionsFi
    reservationCancelledInstructionsSv
    reservationCancelledInstructionsEn
    maxReservationDuration
    minReservationDuration
    reservationStartInterval
    canApplyFreeOfCharge
    reservationsMinDaysBefore
    reservationsMaxDaysBefore
    equipments {
      id
      pk
      nameFi
    }
    qualifiers {
      id
      pk
      nameFi
    }
    unit {
      id
      pk
      nameFi
    }
    minPersons
    maxPersons
    surfaceArea
    descriptionFi
    descriptionSv
    descriptionEn
    paymentTerms {
      id
      pk
    }
    cancellationTerms {
      id
      pk
    }
    serviceSpecificTerms {
      id
      pk
    }
    reservationBlockWholeDay
    bufferTimeBefore
    bufferTimeAfter
    reservationBegins
    contactInformation
    reservationEnds
    publishBegins
    publishEnds
    maxReservationsPerUser
    metadataSet {
      id
      pk
    }
    pricings {
      pk
      lowestPriceNet
      highestPriceNet
      id
      begins
      priceUnit
      lowestPrice
      highestPrice
      taxPercentage {
        id
        pk
        value
      }
    }
    applicationRoundTimeSlots {
      id
      pk
      weekday
      closed
      reservableTimes {
        begin
        end
      }
    }
  }
}

mutation UpdateReservationUnit($input: ReservationUnitUpdateMutationInput!) {
  updateReservationUnit(input: $input) {
    pk
  }
}

mutation CreateReservationUnit($input: ReservationUnitCreateMutationInput!) {
  createReservationUnit(input: $input) {
    pk
  }
}

mutation CreateImage($image: Upload!, $reservationUnit: Int!, $imageType: ImageType!) {
  createReservationUnitImage(
    input: {image: $image, reservationUnit: $reservationUnit, imageType: $imageType}
  ) {
    pk
  }
}

mutation DeleteImage($pk: ID!) {
  deleteReservationUnitImage(input: {pk: $pk}) {
    deleted
  }
}

mutation UpdateImage($pk: Int!, $imageType: ImageType!) {
  updateReservationUnitImage(input: {pk: $pk, imageType: $imageType}) {
    pk
  }
}

query ReservationUnitEditorParameters($equipmentsOrderBy: EquipmentOrderingChoices) {
  equipmentsAll(orderBy: [$equipmentsOrderBy]) {
    id
    name
    nameFi
    pk
  }
  taxPercentages {
    edges {
      node {
        id
        pk
        value
      }
    }
  }
  purposes {
    edges {
      node {
        id
        pk
        nameFi
      }
    }
  }
  reservationUnitTypes {
    edges {
      node {
        id
        nameFi
        pk
      }
    }
  }
  termsOfUse {
    edges {
      node {
        id
        pk
        nameFi
        termsType
      }
    }
  }
  reservationUnitCancellationRules {
    edges {
      node {
        id
        nameFi
        pk
      }
    }
  }
  metadataSets {
    edges {
      node {
        id
        name
        pk
      }
    }
  }
  qualifiers {
    edges {
      node {
        id
        nameFi
        pk
      }
    }
  }
}

query ReservationPermissions($id: ID!) {
  reservation(id: $id) {
    id
    reservationUnits {
      id
      unit {
        id
        pk
      }
    }
  }
}

query Reservations($first: Int, $after: String, $orderBy: [ReservationOrderingChoices], $unit: [Int], $reservationUnits: [Int], $reservationUnitType: [Int], $reservationType: [ReservationTypeChoice], $state: [ReservationStateChoice], $orderStatus: [OrderStatusWithFree], $textSearch: String, $priceLte: Decimal, $priceGte: Decimal, $beginDate: Date, $endDate: Date, $createdAtGte: Date, $createdAtLte: Date, $applyingForFreeOfCharge: Boolean, $isRecurring: Boolean) {
  reservations(
    first: $first
    after: $after
    orderBy: $orderBy
    unit: $unit
    reservationUnits: $reservationUnits
    reservationUnitType: $reservationUnitType
    reservationType: $reservationType
    state: $state
    orderStatus: $orderStatus
    textSearch: $textSearch
    priceLte: $priceLte
    priceGte: $priceGte
    beginDate: $beginDate
    endDate: $endDate
    createdAtGte: $createdAtGte
    createdAtLte: $createdAtLte
    isRecurring: $isRecurring
    applyingForFreeOfCharge: $applyingForFreeOfCharge
    onlyWithPermission: true
  ) {
    edges {
      node {
        name
        reservationUnits {
          id
          nameFi
          unit {
            id
            nameFi
          }
        }
        id
        pk
        begin
        end
        createdAt
        state
        type
        isBlocked
        workingMemo
        reserveeName
        paymentOrder {
          id
          status
          orderUuid
          refundUuid
        }
        user {
          id
          firstName
          lastName
          email
          pk
        }
        bufferTimeBefore
        bufferTimeAfter
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
    totalCount
  }
}

query ReservationApplicationLink($id: ID!) {
  recurringReservation(id: $id) {
    id
    allocatedTimeSlot {
      id
      pk
      reservationUnitOption {
        id
        pk
        applicationSection {
          id
          pk
          application {
            id
            pk
          }
        }
      }
    }
  }
}

mutation ChangeReservationAccessCodeSingle($input: ReservationStaffChangeAccessCodeMutationInput!) {
  staffChangeReservationAccessCode(input: $input) {
    pk
    accessCodeIsActive
    accessCodeGeneratedAt
  }
}

mutation RepairReservationAccessCodeSingle($input: ReservationStaffRepairAccessCodeMutationInput!) {
  staffRepairReservationAccessCode(input: $input) {
    pk
    accessCodeIsActive
    accessCodeGeneratedAt
  }
}

mutation ChangeReservationAccessCodeSeries($input: ReservationSeriesChangeAccessCodeMutationInput!) {
  changeReservationSeriesAccessCode(input: $input) {
    pk
    accessCodeIsActive
    accessCodeGeneratedAt
  }
}

mutation RepairReservationAccessCodeSeries($input: ReservationSeriesRepairAccessCodeMutationInput!) {
  repairReservationSeriesAccessCode(input: $input) {
    pk
    accessCodeIsActive
    accessCodeGeneratedAt
  }
}

mutation ApproveReservation($input: ReservationApproveMutationInput!) {
  approveReservation(input: $input) {
    pk
    state
  }
}

mutation RequireHandling($input: ReservationRequiresHandlingMutationInput!) {
  requireHandlingForReservation(input: $input) {
    pk
    state
  }
}

query SeriesPage($id: ID!) {
  reservation(id: $id) {
    id
    pk
    type
    recurringReservation {
      recurrenceInDays
      endTime
      beginTime
      id
      pk
      weekdays
      beginDate
      endDate
      rejectedOccurrences {
        id
        beginDatetime
        endDatetime
        rejectionReason
      }
      reservations {
        state
        paymentOrder {
          id
          status
        }
        reservationUnits {
          id
          unit {
            id
            pk
          }
          pk
          bufferTimeBefore
          bufferTimeAfter
          reservationStartInterval
        }
        id
        pk
        begin
        end
        type
        bufferTimeAfter
        bufferTimeBefore
        recurringReservation {
          pk
          id
          weekdays
          beginDate
          endDate
        }
      }
    }
    reservationUnits {
      id
      pk
      nameFi
      bufferTimeBefore
      bufferTimeAfter
      reservationStartInterval
    }
  }
}

query ReservationSeries($id: ID!) {
  recurringReservation(id: $id) {
    id
    pk
    weekdays
    beginDate
    endDate
    rejectedOccurrences {
      id
      beginDatetime
      endDatetime
      rejectionReason
    }
    reservations {
      state
      paymentOrder {
        id
        status
      }
      reservationUnits {
        id
        unit {
          id
          pk
        }
        pk
        bufferTimeBefore
        bufferTimeAfter
        reservationStartInterval
      }
      id
      pk
      begin
      end
      type
      bufferTimeAfter
      bufferTimeBefore
      recurringReservation {
        pk
        id
        weekdays
        beginDate
        endDate
      }
    }
  }
}

mutation RescheduleReservationSeries($input: ReservationSeriesRescheduleMutationInput!) {
  rescheduleReservationSeries(input: $input) {
    pk
  }
}

query ReservationsByReservationUnit($id: ID!, $pk: Int!, $beginDate: Date, $endDate: Date, $state: [ReservationStateChoice]) {
  reservationUnit(id: $id) {
    id
    reservations(state: $state, beginDate: $beginDate, endDate: $endDate) {
      id
      user {
        id
        email
      }
      name
      reserveeName
      pk
      begin
      end
      state
      type
      bufferTimeBefore
      bufferTimeAfter
      affectedReservationUnits
      accessType
    }
  }
  affectingReservations(
    forReservationUnits: [$pk]
    state: $state
    beginDate: $beginDate
    endDate: $endDate
  ) {
    id
    user {
      id
      email
    }
    name
    reserveeName
    pk
    begin
    end
    state
    type
    bufferTimeBefore
    bufferTimeAfter
    affectedReservationUnits
    accessType
  }
}

query Reservation($id: ID!) {
  reservation(id: $id) {
    reservationUnits {
      id
      pk
      nameFi
      maxPersons
      bufferTimeBefore
      bufferTimeAfter
      reservationStartInterval
      authentication
      unit {
        id
        pk
        nameFi
      }
      cancellationTerms {
        id
        textFi
        nameFi
      }
      paymentTerms {
        id
        textFi
        nameFi
      }
      pricingTerms {
        id
        textFi
        nameFi
      }
      termsOfUseFi
      serviceSpecificTerms {
        id
        textFi
        nameFi
      }
      minPersons
      metadataSet {
        id
        requiredFields {
          id
          fieldName
        }
        supportedFields {
          id
          fieldName
        }
      }
      pricings {
        id
        begins
        priceUnit
        lowestPrice
        highestPrice
        taxPercentage {
          id
          pk
          value
        }
      }
    }
    id
    pk
    begin
    end
    createdAt
    state
    type
    isBlocked
    workingMemo
    reserveeName
    paymentOrder {
      id
      status
      orderUuid
      refundUuid
    }
    user {
      id
      firstName
      lastName
      email
      pk
    }
    bufferTimeBefore
    bufferTimeAfter
    recurringReservation {
      id
      pk
      beginDate
      beginTime
      endDate
      endTime
      weekdays
      name
      description
      usedAccessTypes
      isAccessCodeIsActiveCorrect
      pindoraInfo {
        accessCode
        accessCodeIsActive
        accessCodeValidity {
          accessCodeBeginsAt
          accessCodeEndsAt
        }
      }
    }
    calendarUrl
    price
    taxPercentageValue
    cancelReason {
      id
      reasonFi
    }
    denyReason {
      id
      reasonFi
    }
    handlingDetails
    accessType
    isAccessCodeIsActiveCorrect
    pindoraInfo {
      accessCode
      accessCodeIsActive
      accessCodeBeginsAt
      accessCodeEndsAt
    }
    ageGroup {
      id
      minimum
      maximum
      pk
    }
    purpose {
      id
      nameFi
      pk
    }
    homeCity {
      id
      nameFi
      pk
    }
    numPersons
    name
    description
    freeOfChargeReason
    applyingForFreeOfCharge
    reserveeFirstName
    reserveeLastName
    reserveeEmail
    reserveePhone
    reserveeType
    reserveeOrganisationName
    reserveeId
    reserveeIsUnregisteredAssociation
    reserveeAddressStreet
    reserveeAddressCity
    reserveeAddressZip
    billingFirstName
    billingLastName
    billingPhone
    billingEmail
    billingAddressStreet
    billingAddressCity
    billingAddressZip
  }
}

query RecurringReservation($id: ID!) {
  recurringReservation(id: $id) {
    id
    pk
    weekdays
    beginDate
    endDate
    rejectedOccurrences {
      id
      beginDatetime
      endDatetime
      rejectionReason
    }
    reservations {
      state
      paymentOrder {
        id
        status
      }
      reservationUnits {
        id
        unit {
          id
          pk
        }
        pk
        bufferTimeBefore
        bufferTimeAfter
        reservationStartInterval
      }
      id
      pk
      begin
      end
      type
      bufferTimeAfter
      bufferTimeBefore
      recurringReservation {
        pk
        id
        weekdays
        beginDate
        endDate
      }
    }
  }
}

mutation UpdateStaffReservation($input: ReservationStaffModifyMutationInput!, $workingMemo: ReservationWorkingMemoMutationInput!) {
  staffReservationModify(input: $input) {
    pk
  }
  updateReservationWorkingMemo(input: $workingMemo) {
    workingMemo
  }
}

mutation UpdateRecurringReservation($input: ReservationSeriesUpdateMutationInput!) {
  updateReservationSeries(input: $input) {
    pk
  }
}

query SearchReservationUnits($after: String, $first: Int, $textSearch: String, $maxPersonsGte: Decimal, $maxPersonsLte: Decimal, $surfaceAreaGte: Decimal, $surfaceAreaLte: Decimal, $unit: [Int], $reservationUnitType: [Int], $orderBy: [ReservationUnitOrderingChoices], $publishingState: [ReservationUnitPublishingState]) {
  reservationUnits(
    first: $first
    after: $after
    orderBy: $orderBy
    textSearch: $textSearch
    maxPersonsGte: $maxPersonsGte
    minPersonsGte: $maxPersonsGte
    maxPersonsLte: $maxPersonsLte
    minPersonsLte: $maxPersonsLte
    surfaceAreaGte: $surfaceAreaGte
    surfaceAreaLte: $surfaceAreaLte
    unit: $unit
    reservationUnitType: $reservationUnitType
    publishingState: $publishingState
    onlyWithPermission: true
  ) {
    edges {
      node {
        id
        pk
        nameFi
        unit {
          id
          nameFi
          pk
        }
        reservationUnitType {
          id
          nameFi
        }
        maxPersons
        surfaceArea
        publishingState
        reservationState
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
    totalCount
  }
}

mutation BannerNotificationCreate($input: BannerNotificationCreateMutationInput!) {
  createBannerNotification(input: $input) {
    pk
  }
}

mutation BannerNotificationUpdate($input: BannerNotificationUpdateMutationInput!) {
  updateBannerNotification(input: $input) {
    pk
  }
}

mutation BannerNotificationDelete($input: BannerNotificationDeleteMutationInput!) {
  deleteBannerNotification(input: $input) {
    deleted
  }
}

query RecurringReservationUnit($id: ID!) {
  unit(id: $id) {
    id
    nameFi
    pk
    reservationUnits {
      id
      pk
      nameFi
      reservationStartInterval
      bufferTimeBefore
      bufferTimeAfter
    }
  }
}

query ReservationUnitCalendar($id: ID!, $pk: Int!, $state: [ReservationStateChoice], $beginDate: Date, $endDate: Date) {
  reservationUnit(id: $id) {
    id
    pk
    reservations(state: $state, beginDate: $beginDate, endDate: $endDate) {
      name
      numPersons
      calendarUrl
      reservationUnits {
        id
        pk
        nameFi
        bufferTimeBefore
        bufferTimeAfter
        unit {
          id
          pk
        }
      }
      user {
        id
        firstName
        lastName
        email
        pk
      }
      affectedReservationUnits
      id
      pk
      begin
      end
      createdAt
      state
      type
      isBlocked
      workingMemo
      reserveeName
      paymentOrder {
        id
        status
        orderUuid
        refundUuid
      }
      bufferTimeBefore
      bufferTimeAfter
    }
  }
  affectingReservations(
    forReservationUnits: [$pk]
    state: $state
    beginDate: $beginDate
    endDate: $endDate
  ) {
    name
    numPersons
    calendarUrl
    reservationUnits {
      id
      pk
      nameFi
      bufferTimeBefore
      bufferTimeAfter
      unit {
        id
        pk
      }
    }
    user {
      id
      firstName
      lastName
      email
      pk
    }
    affectedReservationUnits
    id
    pk
    begin
    end
    createdAt
    state
    type
    isBlocked
    workingMemo
    reserveeName
    paymentOrder {
      id
      status
      orderUuid
      refundUuid
    }
    bufferTimeBefore
    bufferTimeAfter
  }
}

mutation CreateStaffReservation($input: ReservationStaffCreateMutationInput!) {
  createStaffReservation(input: $input) {
    pk
  }
}

query Options($reservationPurposesOrderBy: [ReservationPurposeOrderingChoices]) {
  reservationPurposes(orderBy: $reservationPurposesOrderBy) {
    edges {
      node {
        id
        pk
        nameFi
      }
    }
  }
  ageGroups {
    edges {
      node {
        id
        pk
        minimum
        maximum
      }
    }
  }
  cities {
    edges {
      node {
        id
        nameFi
        pk
      }
    }
  }
}

query UnitView($id: ID!) {
  unit(id: $id) {
    location {
      id
      addressStreetFi
      addressZip
      addressCityFi
    }
    reservationUnits {
      id
      pk
      nameFi
      spaces {
        id
        pk
      }
    }
    id
    pk
    nameFi
  }
}

query ReservationUnitsByUnit($id: ID!, $pk: Int!, $state: [ReservationStateChoice], $beginDate: Date, $endDate: Date) {
  unit(id: $id) {
    id
    reservationUnits {
      id
      pk
      nameFi
      spaces {
        id
        pk
      }
      reservationUnitType {
        id
        pk
      }
      bufferTimeBefore
      bufferTimeAfter
      isDraft
      authentication
    }
  }
  affectingReservations(
    beginDate: $beginDate
    endDate: $endDate
    state: $state
    forUnits: [$pk]
  ) {
    name
    numPersons
    calendarUrl
    reservationUnits {
      id
      pk
      nameFi
      bufferTimeBefore
      bufferTimeAfter
      unit {
        id
        pk
      }
    }
    user {
      id
      firstName
      lastName
      email
      pk
    }
    affectedReservationUnits
    id
    pk
    begin
    end
    createdAt
    state
    type
    isBlocked
    workingMemo
    reserveeName
    paymentOrder {
      id
      status
      orderUuid
      refundUuid
    }
    bufferTimeBefore
    bufferTimeAfter
  }
}

query ReservationUnit($id: ID!) {
  reservationUnit(id: $id) {
    id
    pk
    nameFi
    maxPersons
    bufferTimeBefore
    bufferTimeAfter
    reservationStartInterval
    authentication
    unit {
      id
      pk
      nameFi
    }
    cancellationTerms {
      id
      textFi
      nameFi
    }
    paymentTerms {
      id
      textFi
      nameFi
    }
    pricingTerms {
      id
      textFi
      nameFi
    }
    termsOfUseFi
    serviceSpecificTerms {
      id
      textFi
      nameFi
    }
    minPersons
    metadataSet {
      id
      requiredFields {
        id
        fieldName
      }
      supportedFields {
        id
        fieldName
      }
    }
  }
}

query ReservationTimesInReservationUnit($id: ID!, $pk: Int!, $beginDate: Date, $endDate: Date, $state: [ReservationStateChoice]) {
  reservationUnit(id: $id) {
    id
    reservations(beginDate: $beginDate, endDate: $endDate, state: $state) {
      id
      begin
      end
      bufferTimeBefore
      bufferTimeAfter
      type
      affectedReservationUnits
      recurringReservation {
        id
        pk
      }
    }
  }
  affectingReservations(
    forReservationUnits: [$pk]
    state: $state
    beginDate: $beginDate
    endDate: $endDate
  ) {
    id
    begin
    end
    bufferTimeBefore
    bufferTimeAfter
    type
    affectedReservationUnits
    recurringReservation {
      id
      pk
    }
  }
}

mutation CreateReservationSeries($input: ReservationSeriesCreateMutationInput!) {
  createReservationSeries(input: $input) {
    pk
  }
}

query ApplicationAdmin($id: ID!) {
  application(id: $id) {
    workingMemo
    user {
      id
      email
    }
    pk
    id
    status
    lastModifiedDate
    applicationRound {
      id
      pk
      nameFi
    }
    applicationSections {
      suitableTimeRanges {
        id
        pk
        beginTime
        endTime
        dayOfTheWeek
        priority
      }
      purpose {
        id
        pk
        nameFi
        nameSv
        nameEn
      }
      allocations
      reservationUnitOptions {
        id
        rejected
        allocatedTimeSlots {
          pk
          id
        }
        reservationUnit {
          applicationRoundTimeSlots {
            id
            pk
            weekday
            closed
            reservableTimes {
              begin
              end
            }
          }
          id
          pk
          nameFi
          nameEn
          nameSv
          unit {
            id
            pk
            nameFi
            nameEn
            nameSv
          }
        }
        pk
        preferredOrder
      }
      id
      pk
      name
      status
      reservationMaxDuration
      ageGroup {
        id
        pk
        minimum
        maximum
      }
      numPersons
      reservationsEndDate
      reservationsBeginDate
      appliedReservationsPerWeek
      reservationMinDuration
    }
    applicantType
    contactPerson {
      id
      pk
      firstName
      lastName
      email
      phoneNumber
    }
    additionalInformation
    organisation {
      id
      pk
      nameFi
      identifier
      organisationType
      coreBusinessFi
      yearEstablished
      address {
        id
        pk
        postCode
        streetAddressFi
        cityFi
      }
    }
    homeCity {
      id
      pk
      nameFi
      nameEn
      nameSv
    }
    billingAddress {
      id
      pk
      postCode
      streetAddressFi
      cityFi
    }
  }
}

mutation RejectAllSectionOptions($input: RejectAllSectionOptionsMutationInput!) {
  rejectAllSectionOptions(input: $input) {
    pk
  }
}

mutation RestoreAllSectionOptions($input: RestoreAllSectionOptionsMutationInput!) {
  restoreAllSectionOptions(input: $input) {
    pk
  }
}

mutation RejectAllApplicationOptions($input: RejectAllApplicationOptionsMutationInput!) {
  rejectAllApplicationOptions(input: $input) {
    pk
  }
}

mutation RestoreAllApplicationOptions($input: RestoreAllApplicationOptionsMutationInput!) {
  restoreAllApplicationOptions(input: $input) {
    pk
  }
}

query ApplicationRounds {
  applicationRounds(onlyWithPermissions: true) {
    edges {
      node {
        reservationPeriodBegin
        reservationPeriodEnd
        applicationsCount
        reservationUnitCount
        statusTimestamp
        id
        pk
        nameFi
        status
        applicationPeriodBegin
        applicationPeriodEnd
      }
    }
  }
}

query ApplicationRound($id: ID!) {
  applicationRound(id: $id) {
    applicationsCount
    isSettingHandledAllowed
    reservationCreationStatus
    reservationUnits {
      id
      pk
      nameFi
      unit {
        id
        pk
        nameFi
      }
    }
    id
    pk
    nameFi
    status
    applicationPeriodBegin
    applicationPeriodEnd
  }
}

query ApplicationRoundCriteria($id: ID!) {
  applicationRound(id: $id) {
    id
    pk
    nameFi
    reservationUnitCount
    applicationPeriodBegin
    applicationPeriodEnd
    reservationPeriodBegin
    reservationPeriodEnd
    reservationUnits {
      id
      pk
      nameFi
      spaces {
        id
        nameFi
      }
      unit {
        id
        nameFi
      }
    }
  }
}

query RejectedOccurrences($applicationRound: Int, $unit: [Int], $reservationUnit: [Int], $orderBy: [RejectedOccurrenceOrderingChoices], $textSearch: String, $after: String, $first: Int) {
  rejectedOccurrences(
    applicationRound: $applicationRound
    unit: $unit
    reservationUnit: $reservationUnit
    orderBy: $orderBy
    textSearch: $textSearch
    after: $after
    first: $first
  ) {
    totalCount
    pageInfo {
      hasNextPage
      endCursor
    }
    edges {
      node {
        id
        pk
        beginDatetime
        endDatetime
        rejectionReason
        recurringReservation {
          id
          allocatedTimeSlot {
            id
            pk
            dayOfTheWeek
            beginTime
            endTime
            reservationUnitOption {
              id
              applicationSection {
                id
                name
                application {
                  id
                  pk
                  applicantType
                  contactPerson {
                    id
                    firstName
                    lastName
                  }
                  organisation {
                    id
                    nameFi
                  }
                }
              }
              reservationUnit {
                id
                nameFi
                pk
                unit {
                  id
                  nameFi
                }
              }
            }
          }
          reservations {
            id
            pk
          }
        }
      }
    }
  }
}

query Applications($applicationRound: Int!, $unit: [Int], $applicantType: [ApplicantTypeChoice], $status: [ApplicationStatusChoice]!, $textSearch: String, $orderBy: [ApplicationOrderingChoices], $first: Int, $after: String) {
  applications(
    applicationRound: $applicationRound
    unit: $unit
    applicantType: $applicantType
    status: $status
    textSearch: $textSearch
    orderBy: $orderBy
    first: $first
    after: $after
  ) {
    edges {
      node {
        id
        pk
        status
        applicationSections {
          id
          pk
          name
          reservationUnitOptions {
            id
            preferredOrder
            reservationUnit {
              id
              unit {
                id
                pk
                nameFi
              }
            }
          }
          reservationsEndDate
          reservationsBeginDate
          appliedReservationsPerWeek
          reservationMinDuration
        }
        applicantType
        organisation {
          id
          nameFi
          organisationType
        }
        contactPerson {
          id
          lastName
          firstName
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
    totalCount
  }
}

query ApplicationSections($applicationRound: Int!, $applicationStatus: [ApplicationStatusChoice]!, $status: [ApplicationSectionStatusChoice], $unit: [Int], $applicantType: [ApplicantTypeChoice], $preferredOrder: [Int], $textSearch: String, $priority: [Priority], $purpose: [Int], $reservationUnit: [Int], $ageGroup: [Int], $homeCity: [Int], $includePreferredOrder10OrHigher: Boolean, $orderBy: [ApplicationSectionOrderingChoices], $first: Int, $after: String) {
  applicationSections(
    applicationRound: $applicationRound
    applicationStatus: $applicationStatus
    status: $status
    unit: $unit
    applicantType: $applicantType
    preferredOrder: $preferredOrder
    textSearch: $textSearch
    priority: $priority
    purpose: $purpose
    reservationUnit: $reservationUnit
    ageGroup: $ageGroup
    homeCity: $homeCity
    includePreferredOrder10OrHigher: $includePreferredOrder10OrHigher
    orderBy: $orderBy
    first: $first
    after: $after
  ) {
    edges {
      node {
        allocations
        reservationUnitOptions {
          id
          allocatedTimeSlots {
            id
            pk
            dayOfTheWeek
            beginTime
            endTime
            reservationUnitOption {
              id
              applicationSection {
                id
                pk
              }
            }
          }
          reservationUnit {
            id
            pk
            nameFi
            unit {
              id
              pk
              nameFi
            }
          }
          pk
          preferredOrder
        }
        purpose {
          id
          pk
          nameFi
        }
        application {
          id
          pk
          status
          applicantType
          organisation {
            id
            nameFi
            organisationType
          }
          contactPerson {
            id
            lastName
            firstName
          }
        }
        id
        pk
        name
        status
        reservationMaxDuration
        ageGroup {
          id
          pk
          minimum
          maximum
        }
        numPersons
        reservationsEndDate
        reservationsBeginDate
        appliedReservationsPerWeek
        reservationMinDuration
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
    totalCount
  }
}

query AllocatedTimeSlots($applicationRound: Int!, $allocatedUnit: [Int], $applicantType: [ApplicantTypeChoice], $applicationSectionStatus: [ApplicationSectionStatusChoice], $allocatedReservationUnit: [Int], $dayOfTheWeek: [Weekday], $textSearch: String, $accessCodeState: [AccessCodeState], $orderBy: [AllocatedTimeSlotOrderingChoices], $after: String, $first: Int) {
  allocatedTimeSlots(
    after: $after
    first: $first
    applicationRound: $applicationRound
    allocatedUnit: $allocatedUnit
    applicantType: $applicantType
    applicationSectionStatus: $applicationSectionStatus
    allocatedReservationUnit: $allocatedReservationUnit
    accessCodeState: $accessCodeState
    dayOfTheWeek: $dayOfTheWeek
    textSearch: $textSearch
    orderBy: $orderBy
  ) {
    edges {
      node {
        id
        pk
        dayOfTheWeek
        endTime
        beginTime
        recurringReservation {
          id
          pk
          isAccessCodeIsActiveCorrect
          reservations {
            id
            pk
          }
        }
        reservationUnitOption {
          id
          rejected
          locked
          preferredOrder
          applicationSection {
            id
            pk
            name
            reservationsEndDate
            reservationsBeginDate
            reservationMinDuration
            reservationMaxDuration
            application {
              pk
              id
              applicantType
              organisation {
                id
                nameFi
                organisationType
              }
              contactPerson {
                id
                lastName
                firstName
              }
            }
          }
          reservationUnit {
            id
            nameFi
            unit {
              id
              nameFi
            }
          }
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
    totalCount
  }
}

mutation EndAllocation($pk: Int!) {
  setApplicationRoundHandled(input: {pk: $pk}) {
    pk
  }
}

mutation SendResults($pk: Int!) {
  setApplicationRoundResultsSent(input: {pk: $pk}) {
    pk
  }
}

query ApplicationRoundFilter($id: ID!) {
  applicationRound(id: $id) {
    id
    nameFi
    status
    reservationPeriodBegin
    reservationPeriodEnd
    reservationUnits {
      id
      pk
      nameFi
      unit {
        id
        pk
        nameFi
      }
    }
  }
}

query AllApplicationEvents($applicationRound: Int!, $applicationStatus: [ApplicationStatusChoice]!, $unit: [Int]!, $reservationUnit: [Int]!) {
  applicationSections(
    applicationRound: $applicationRound
    reservationUnit: $reservationUnit
    unit: $unit
    applicationStatus: $applicationStatus
  ) {
    edges {
      node {
        id
        reservationUnitOptions {
          id
          reservationUnit {
            id
            pk
            nameFi
          }
        }
      }
    }
    totalCount
  }
}

mutation CreateAllocatedTimeSlot($input: AllocatedTimeSlotCreateMutationInput!) {
  createAllocatedTimeslot(input: $input) {
    beginTime
    dayOfTheWeek
    endTime
    pk
    reservationUnitOption
  }
}

mutation DeleteAllocatedTimeSlot($input: AllocatedTimeSlotDeleteMutationInput!) {
  deleteAllocatedTimeslot(input: $input) {
    deleted
  }
}

query ApplicationSectionAllocations($applicationRound: Int!, $applicationStatus: [ApplicationStatusChoice]!, $status: [ApplicationSectionStatusChoice], $applicantType: [ApplicantTypeChoice], $preferredOrder: [Int], $textSearch: String, $priority: [Priority], $purpose: [Int], $reservationUnit: Int!, $beginDate: Date!, $endDate: Date!, $ageGroup: [Int], $homeCity: [Int], $includePreferredOrder10OrHigher: Boolean, $after: String) {
  applicationSections(
    applicationRound: $applicationRound
    applicationStatus: $applicationStatus
    status: $status
    applicantType: $applicantType
    preferredOrder: $preferredOrder
    textSearch: $textSearch
    priority: $priority
    purpose: $purpose
    reservationUnit: [$reservationUnit]
    ageGroup: $ageGroup
    homeCity: $homeCity
    includePreferredOrder10OrHigher: $includePreferredOrder10OrHigher
    after: $after
  ) {
    edges {
      node {
        allocations
        suitableTimeRanges(fulfilled: false) {
          id
          beginTime
          endTime
          dayOfTheWeek
          priority
          fulfilled
        }
        reservationUnitOptions {
          id
          pk
          locked
          rejected
          allocatedTimeSlots {
            pk
            reservationUnitOption {
              id
              pk
              applicationSection {
                id
                pk
              }
            }
            id
            beginTime
            endTime
            dayOfTheWeek
          }
          reservationUnit {
            id
            pk
            nameFi
            unit {
              id
              pk
              nameFi
            }
          }
          preferredOrder
        }
        purpose {
          id
          pk
          nameFi
        }
        application {
          id
          pk
          status
          applicantType
          organisation {
            id
            nameFi
            organisationType
          }
          contactPerson {
            id
            lastName
            firstName
          }
        }
        id
        pk
        name
        status
        reservationMaxDuration
        ageGroup {
          id
          pk
          minimum
          maximum
        }
        numPersons
        reservationsEndDate
        reservationsBeginDate
        appliedReservationsPerWeek
        reservationMinDuration
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
    totalCount
  }
  affectingAllocatedTimeSlots(
    reservationUnit: $reservationUnit
    beginDate: $beginDate
    endDate: $endDate
  ) {
    id
    beginTime
    endTime
    dayOfTheWeek
  }
}

mutation RejectRest($input: ReservationUnitOptionUpdateMutationInput!) {
  updateReservationUnitOption(input: $input) {
    pk
    rejected
    locked
  }
}

query CurrentUser {
  currentUser {
    id
    username
    firstName
    lastName
    email
    isSuperuser
    pk
    unitRoles {
      id
      permissions
      units {
        id
        pk
        nameFi
      }
      unitGroups {
        id
        units {
          id
          pk
        }
      }
      role
    }
    generalRoles {
      id
      permissions
      role
    }
  }
}

query UnitsFilter($orderBy: [UnitOrderingChoices]) {
  unitsAll(onlyWithPermission: true, orderBy: $orderBy) {
    id
    nameFi
    pk
  }
}

query ReservationUnitTypesFilter($after: String, $orderBy: [ReservationUnitTypeOrderingChoices]) {
  reservationUnitTypes(after: $after, orderBy: $orderBy) {
    edges {
      node {
        id
        pk
        nameFi
      }
    }
    totalCount
  }
}

query ReservationUnitsFilterParams($unit: [Int], $orderBy: [ReservationUnitOrderingChoices]) {
  reservationUnitsAll(onlyWithPermission: true, unit: $unit, orderBy: $orderBy) {
    id
    nameFi
    pk
  }
}

query ReservationDenyReasons($orderBy: [ReservationDenyReasonOrderingChoices]) {
  reservationDenyReasons(orderBy: $orderBy) {
    edges {
      node {
        id
        pk
        reasonFi
      }
    }
  }
}

query CheckPermissions($permission: UserPermissionChoice!, $units: [Int!], $requireAll: Boolean = false) {
  checkPermissions(
    permission: $permission
    units: $units
    requireAll: $requireAll
  ) {
    hasPermission
  }
}

mutation UpdateReservationWorkingMemo($pk: Int!, $workingMemo: String!) {
  updateReservationWorkingMemo(input: {pk: $pk, workingMemo: $workingMemo}) {
    pk
    workingMemo
  }
}

mutation UpdateApplicationWorkingMemo($pk: Int!, $workingMemo: String!) {
  updateApplicationWorkingMemo(input: {pk: $pk, workingMemo: $workingMemo}) {
    pk
    workingMemo
  }
}

mutation StaffAdjustReservationTime($input: ReservationStaffAdjustTimeMutationInput!) {
  staffAdjustReservationTime(input: $input) {
    pk
    begin
    end
    state
  }
}

mutation AddReservationToSeries($input: ReservationSeriesAddMutationInput!) {
  addReservationToSeries(input: $input) {
    pk
  }
}

mutation DenyReservation($input: ReservationDenyMutationInput!) {
  denyReservation(input: $input) {
    pk
    state
  }
}

mutation DenyReservationSeries($input: ReservationSeriesDenyMutationInput!) {
  denyReservationSeries(input: $input) {
    denied
    future
  }
}

mutation RefundReservation($input: ReservationRefundMutationInput!) {
  refundReservation(input: $input) {
    pk
  }
}

query ReservationDateOfBirth($id: ID!) {
  reservation(id: $id) {
    id
    user {
      id
      pk
      dateOfBirth
    }
  }
}

query ApplicationDateOfBirth($id: ID!) {
  application(id: $id) {
    id
    user {
      id
      pk
      dateOfBirth
    }
  }
}

query Unit($id: ID!) {
  unit(id: $id) {
    id
    pk
    nameFi
    tprekId
    shortDescriptionFi
    reservationUnits {
      resources {
        id
        pk
      }
      isDraft
      purposes {
        id
        pk
        nameFi
      }
      images {
        id
        imageUrl
        largeUrl
        mediumUrl
        smallUrl
        imageType
      }
      id
      pk
      nameFi
      maxPersons
      surfaceArea
      reservationUnitType {
        id
        nameFi
      }
    }
    spaces {
      code
      resources {
        id
        pk
        nameFi
        locationType
        space {
          id
          nameFi
          unit {
            id
            nameFi
            pk
          }
        }
      }
      children {
        id
        pk
      }
      id
      pk
      nameFi
      parent {
        id
        pk
        nameFi
      }
      surfaceArea
      maxPersons
    }
    location {
      id
      addressStreetFi
      addressZip
      addressCityFi
    }
  }
}

query UnitWithSpacesAndResources($id: ID!) {
  unit(id: $id) {
    id
    pk
    nameFi
    spaces {
      resources {
        id
        pk
        nameFi
      }
      id
      pk
      nameFi
      parent {
        id
        pk
        nameFi
      }
      surfaceArea
      maxPersons
    }
    location {
      id
      addressStreetFi
      addressZip
      addressCityFi
    }
  }
}

query HandlingData($beginDate: Date!, $state: [ReservationStateChoice]!) {
  reservations(
    state: $state
    beginDate: $beginDate
    onlyWithHandlingPermission: true
  ) {
    edges {
      node {
        id
        pk
      }
    }
  }
  units(onlyWithPermission: true) {
    edges {
      node {
        id
        pk
      }
    }
    totalCount
  }
}

query BannerNotificationsAdmin($id: ID!) {
  bannerNotification(id: $id) {
    pk
    name
    target
    activeUntil
    draft
    state
    id
    level
    activeFrom
    message
    messageEn
    messageFi
    messageSv
  }
}

query BannerNotificationsAdminList($first: Int, $after: String, $orderBy: [BannerNotificationOrderingChoices]) {
  bannerNotifications(first: $first, after: $after, orderBy: $orderBy) {
    edges {
      node {
        pk
        name
        target
        activeUntil
        draft
        state
        id
        level
        activeFrom
        message
        messageEn
        messageFi
        messageSv
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
    totalCount
  }
}

query TermsOfUse($termsType: TermsType) {
  termsOfUse(termsType: $termsType) {
    edges {
      node {
        id
        pk
        termsType
        nameFi
        nameEn
        nameSv
        textFi
        textEn
        textSv
      }
    }
  }
}

query BannerNotificationsListAll {
  bannerNotifications(isVisible: true, target: ALL) {
    edges {
      node {
        id
        level
        activeFrom
        message
        messageEn
        messageFi
        messageSv
      }
    }
  }
}

query BannerNotificationsList($target: BannerNotificationTarget!) {
  bannerNotifications(isVisible: true, target: $target) {
    edges {
      node {
        id
        level
        activeFrom
        message
        messageEn
        messageFi
        messageSv
      }
    }
  }
}